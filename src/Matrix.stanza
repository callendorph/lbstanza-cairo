defpackage cairo/Matrix :
  import core
  import cairo/Wrapper


public lostanza deftype Matrix2D :
  xx:double
  yx:double
  xy:double
  yy:double
  x0:double
  y0:double

public lostanza defn xx (f:ref<Matrix2D>) -> ref<Double> :
  return new Double{f.xx}

public lostanza defn yx (f:ref<Matrix2D>) -> ref<Double> :
  return new Double{f.yx}

public lostanza defn xy (f:ref<Matrix2D>) -> ref<Double> :
  return new Double{f.xy}

public lostanza defn yy (f:ref<Matrix2D>) -> ref<Double> :
  return new Double{f.yy}

public lostanza defn x0 (f:ref<Matrix2D>) -> ref<Double> :
  return new Double{f.x0}

public lostanza defn y0 (f:ref<Matrix2D>) -> ref<Double> :
  return new Double{f.y0}

public lostanza defn Matrix2D () -> ref<Matrix2D> :
  return new Matrix2D{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}

public lostanza defn Translate (x:ref<Double>, y:ref<Double>) -> ref<Matrix2D> :
  ; Translation
  val ret = Matrix2D()
  w_cairo_matrix_init_translate(addr!(ret.xx), x.value, y.value)
  return ret

public lostanza defn Scale (x:ref<Double>, y:ref<Double>) -> ref<Matrix2D> :
  val ret = Matrix2D()
  w_cairo_matrix_init_scale(addr!(ret.xx), x.value, y.value)
  return ret

public lostanza defn Rotate (r:ref<Double>) -> ref<Matrix2D> :
  ; Rotation Matrix - r = rotation in radians
  val ret = Matrix2D()
  w_cairo_matrix_init_rotate(addr!(ret.xx), r.value)
  return ret

public lostanza defn Identity () -> ref<Matrix2D> :
  val ret = Matrix2D()
  w_cairo_matrix_init_identity(addr!(ret.xx))
  return ret

public lostanza defn translate (self:ref<Matrix2D>, x:ref<Double>, y:ref<Double>) -> ref<False> :
  w_cairo_matrix_translate(addr!(self.xx), x.value, y.value)
  return false

public lostanza defn scale (self:ref<Matrix2D>, x:ref<Double>, y:ref<Double>) -> ref<False> :
  w_cairo_matrix_scale(addr!(self.xx), x.value, y.value)
  return false

public lostanza defn rotate (self:ref<Matrix2D>, r:ref<Double>) -> ref<False> :
  w_cairo_matrix_rotate(addr!(self.xx), r.value)
  return false

public lostanza defn invert (self:ref<Matrix2D>) -> ref<Int> :
  val ret = w_cairo_matrix_invert(addr!(self.xx))
  return new Int{ret}

public lostanza defn times (a:ref<Matrix2D>, b:ref<Matrix2D>) -> ref<Matrix2D> :
  val ret = Matrix2D()
  w_cairo_matrix_multiply(addr!(ret.xx), addr!(a.xx), addr!(b.xx))
  return ret

public defmethod print (o:OutputStream, a:Matrix2D) :
  val funcs = [xx, xy, yx, yy, x0, y0]
  val props = map({_(a)}, funcs)
  print(o, "Matrix2D{%,}" % [props])

;@ TODO
; public lostanza defn transform-distance (self:ref<Matrix2D>, Pt) -> ref<False> :
;   pass

; public lostanza defn transform-point (self:ref<Matrix2D>, Pt) -> ref<False> :
;   pass


