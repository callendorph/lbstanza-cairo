
defpackage cairo/Errors :
  import core
  import cairo/Wrapper
  import cairo/Enums/cairo_status_t


public lostanza defn cairo-status-to-string (status:ref<cairo_status_t>) -> ref<String> :
  val ret = w_cairo_status_to_string(to-int(status).value)
  return String(ret)

public lostanza defn cairo-status-to-string (status:ref<Int>) -> ref<String> :
  val ret = w_cairo_status_to_string(status.value)
  return String(ret)

public lostanza defn cairo-debug-reset-static-data () -> ref<False> :
  w_cairo_debug_reset_static_data()
  return false

public defstruct CairoException <: Exception :
  code:cairo_status_t

defmethod print (o:OutputStream, e:CairoException) :
  val c = code(e)
  print(o, "Cairo Error[%_]: %_" % [c, cairo-status-to-string(c)])

public defstruct InvalidArgument <: Exception :
  msg:String

defmethod print (o:OutputStream, e:InvalidArgument) :
  val m = msg(e)
  print(o, "Invalid Argument: %_" % [m])

public lostanza defn check-status (s:int) -> ref<False>:
  check-status(cairo_status_t(s))
  return false

public defn check-status (s:cairo_status_t) :
  if s != CAIRO_STATUS_SUCCESS:
    throw(CairoException(s))