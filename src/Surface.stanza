defpackage cairo/Surface :
  import core
  import cairo/Wrapper
  import cairo/Device
  import cairo/Geometry
  import cairo/Enums/cairo_content_t
  import cairo/Enums/cairo_status_t
  import cairo/Enums/cairo_surface_type_t


public lostanza deftype SurfaceFinalizer <: Finalizer :
  value:ptr<?>

lostanza defmethod run (self:ref<SurfaceFinalizer>) -> ref<False> :
  w_cairo_surface_destroy(self.value)
  return false

public lostanza deftype Surface <: Unique :
  value : ptr<?>

public lostanza defn Surface (p:ptr<?>) -> ref<Surface> :
  ; Note that this should only be used internally for
  ;   making sure that reference counting is handled properly.
  val ret = new Surface{p}
  add-finalizer(new SurfaceFinalizer{p}, ret)
  return ret

public lostanza defn Surface (other:ref<Surface>, contentType:ref<cairo_content_t>, width:ref<Int>, height:ref<Int>) -> ref<Surface> :
  ; Copy Constructor for Surfaces.
  val ret = w_cairo_surface_create_similar(other.value, to-int(contentType).value, width.value, height.value)
  return Surface(ret)

public lostanza defn Surface (target:ref<Surface>, x:ref<Double>, y:ref<Double>, width:ref<Double>, height:ref<Double>) -> ref<Surface> :
  val ret = w_cairo_surface_create_for_rectangle(target.value, x.value, y.value, width.value, height.value)
  return Surface(ret)

public lostanza defn get-ref (self:ref<Surface>) -> ref<Surface> :
  val ret = w_cairo_surface_reference(self.value)
  return Surface(ret)

public lostanza defn get-surface-ref (p:ptr<?>) -> ref<Surface> :
  val ret = w_cairo_surface_reference(p)
  return Surface(ret)

public lostanza defn get-ref-count (self:ref<Surface>) -> ref<Int> :
  val ret = w_cairo_surface_get_reference_count(self.value)
  return new Int{ret}

public lostanza defn get-status (self:ref<Surface>) -> ref<cairo_status_t> :
  val ret = w_cairo_surface_status(self.value)
  return cairo_status_t(ret)

public lostanza defn finish (self:ref<Surface>) -> ref<False> :
  w_cairo_surface_finish(self.value)
  return false

public lostanza defn flush (self:ref<Surface>) -> ref<False> :
  w_cairo_surface_finish(self.value)
  return false

; @TODO - Do I need to increment the Device reference here ?
; public lostanza defn get-device (self:ref<Surface>) -> ref<Device> :
;   val ret = w_cairo_surface_get_device(self.value)
;   return Device(ret)

; public lostanza defn get-font-options (self:ref<Surface>) -> ref<FontOptions> :
;   val ret = w_cairo_surface_get_font_options(self.value)
;   return FontOptions(ret)

public lostanza defn get-content (self:ref<Surface>) -> ref<cairo_content_t> :
  val ret = w_cairo_surface_get_content(self.value)
  return cairo_content_t(ret)

public lostanza defn mark-dirty (self:ref<Surface>) -> ref<False> :
  w_cairo_surface_mark_dirty(self.value)
  return false

public lostanza defn mark-dirty (self:ref<Surface>, x:ref<Int>, y:ref<Int>, width:ref<Int>, height:ref<Int>) -> ref<False> :
  w_cairo_surface_mark_dirty_rectangle(self.value, x.value, y.value, width.value, height.value)
  return false

public lostanza defn set-device-offset (self:ref<Surface>, x:ref<Double>, y:ref<Double>) -> ref<False> :
  w_cairo_surface_set_device_offset(self.value, x.value, y.value)
  return false

public lostanza defn set-device-offset (self:ref<Surface>, p:ref<Point2D>) -> ref<False> :
  w_cairo_surface_set_device_offset(self.value, p.x, p.y)
  return false

; public lostanza defn get-device-offset (self:ref<Surface>) -> ref<False> :
;   ; @TODO - I need to return a Point like object or something ?
;   w_cairo_surface_get_device_offset(self.value)
;   return false

public lostanza defn set-device-scale (self:ref<Surface>, x:ref<Double>, y:ref<Double>) -> ref<False> :
  w_cairo_surface_set_device_scale(self.value, x.value, y.value)
  return false

; public lostanza defn get-device-scale (self:ref<Surface>) -> ref<False> :
;   w_cairo_surface_get_device_scale(self.value)
;   return false

public lostanza defn set-fallback-resolution (self:ref<Surface>, x:ref<Double>, y:ref<Double>) -> ref<False> :
  w_cairo_surface_set_fallback_resolution(self.value, x.value, y.value)
  return false

; public lostanza defn get-fallback-resolution (self:ref<Surface>) -> ref<False> :
;   w_cairo_surface_get_fallback_resolution(self.value)
;   return false

public lostanza defn get-type (self:ref<Surface>) -> ref<cairo_surface_type_t> :
  val ret = w_cairo_surface_get_type(self.value)
  return cairo_surface_type_t(ret)

; User Data Not Impleted yet

public lostanza defn copy-page (self:ref<Surface>) -> ref<False> :
  w_cairo_surface_copy_page(self.value)
  return false

public lostanza defn show-page (self:ref<Surface>) -> ref<False> :
  w_cairo_surface_show_page(self.value)
  return false

public lostanza defn has-show-text-glyphs (self:ref<Surface>) -> ref<True|False> :
  val ret = w_cairo_surface_has_show_text_glyphs(self.value)
  if ret > 0 :
    return true
  else:
    return false

; @TODO set_mime_data / get_mime_data / supports_mime_type

; public lostanza defn map-to-image (self:ref<Surface>, extents:ref<Rectangle>) -> ref<Surface> :
;   val ret = w_cairo_surface_map_to_image(self.value, addr(value))
;   return Surface(ret)

public lostanza defn unmap-image (self:ref<Surface>, img:ref<Surface>) -> ref<False> :
  val ret = w_cairo_surface_unmap_image(self.value, img.value)
  return false









