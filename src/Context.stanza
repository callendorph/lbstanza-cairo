defpackage cairo/Context :
  import core
  import cairo/Surface
  import cairo/Patterns
  import cairo/Geometry
  import cairo/Errors
  import cairo/Colors
  import cairo/Wrapper
  import cairo/Enums/cairo_antialias_t
  import cairo/Enums/cairo_fill_rule_t
  import cairo/Enums/cairo_line_cap_t
  import cairo/Enums/cairo_line_join_t
  import cairo/Enums/cairo_operator_t
  import cairo/Enums/cairo_status_t


lostanza deftype ContextFinalizer <: Finalizer :
  value:ptr<?>

lostanza defmethod run (self:ref<ContextFinalizer>) -> ref<False> :
  w_cairo_destroy(self.value)
  return false

public lostanza deftype Context <: Unique :
  value : ptr<?>

public lostanza defn Context (p:ptr<?>) -> ref<Context> :
  ; Note that this should only be used internally for
  ;   making sure that reference counting is handled properly.
  val ret = new Context{p}
  add-finalizer(new ContextFinalizer{p}, ret)
  return ret

public lostanza defn Context (surface:ref<Surface>) -> ref<Context> :
  val ret = w_cairo_create(surface.value)
  return Context(ret)

public lostanza defn get-ref (self:ref<Context>) -> ref<Context> :
  val ret = w_cairo_reference(self.value)
  return Context(ret)

public lostanza defn get-ref-count (self:ref<Context>) -> ref<Int> :
  val ret = w_cairo_get_reference_count(self.value)
  return new Int{ret}

public lostanza defn get-status (self:ref<Context>) -> ref<cairo_status_t> :
  val ret = w_cairo_status(self.value)
  return cairo_status_t(ret)

public defn check-status (self:Context) :
  check-status(get-status(self))

public lostanza defn save (self:ref<Context>) -> ref<False> :
  w_cairo_save(self.value)
  return false

public lostanza defn restore (self:ref<Context>) -> ref<False> :
  w_cairo_restore(self.value)
  return false

public lostanza defn get-target (self:ref<Context>) -> ref<Surface> :
  val pRet = w_cairo_get_target(self.value)
  return get-surface-ref(pRet)

public lostanza defn push-group (self:ref<Context>) -> ref<False> :
  w_cairo_push_group(self.value)
  return false

public lostanza defn push-group (self:ref<Context>, content:ref<Int>) -> ref<False> :
  w_cairo_push_group_with_content(self.value, content.value)
  return false

public lostanza defn pop-group (self:ref<Context>) -> ref<Pattern> :
  val ret = w_cairo_pop_group(self.value)
  return Pattern(ret)

public lostanza defn pop-group-to-src (self:ref<Context>) -> ref<False> :
  w_cairo_pop_group_to_source(self.value)
  return false

public lostanza defn get-group-target (self:ref<Context>) -> ref<Surface> :
  val pRet = w_cairo_get_group_target(self.value)
  val ret = get-surface-ref(pRet)
  return ret

public lostanza defn set-source (self:ref<Context>, red:ref<Double>, green:ref<Double>, blue:ref<Double>) -> ref<False> :
  w_cairo_set_source_rgb(self.value, red.value, green.value, blue.value)
  return false

public lostanza defn set-source (self:ref<Context>, c:ref<RGB>) -> ref<False> :
  w_cairo_set_source_rgb(self.value, c.r, c.g, c.b)
  return false

public lostanza defn set-source (self:ref<Context>, red:ref<Double>, green:ref<Double>, blue:ref<Double>, alpha:ref<Double>) -> ref<False> :
  w_cairo_set_source_rgba(self.value, red.value, green.value, blue.value, alpha.value)
  return false

public lostanza defn set-source (self:ref<Context>, c:ref<ARGB>) -> ref<False> :
  w_cairo_set_source_rgba(self.value, c.r, c.g, c.b, c.a)
  return false

public lostanza defn set-source (self:ref<Context>, src:ref<Pattern>) -> ref<False> :
  w_cairo_set_source(self.value, src.value)
  return false

public lostanza defn set-source (self:ref<Context>, surface:ref<Surface>, x:ref<Double>, y:ref<Double>) -> ref<False> :
  w_cairo_set_source_surface(self.value, surface.value, x.value, y.value)
  return false

public lostanza defn set-source (self:ref<Context>, surface:ref<Surface>, p:ref<Point2D>) -> ref<False> :
  w_cairo_set_source_surface(self.value, surface.value, p.x, p.y)
  return false

public lostanza defn get-source (self:ref<Context>) -> ref<Pattern> :
  val pRet = w_cairo_get_source(self.value)
  val ret = get-pattern-ref(pRet)
  return ret

public lostanza defn set-antialias (self:ref<Context>, antialias:ref<cairo_antialias_t>) -> ref<False> :
  w_cairo_set_antialias(self.value, to-int(antialias).value)
  return false

public lostanza defn get-antialias (self:ref<Context>) -> ref<cairo_antialias_t> :
  val ret = w_cairo_get_antialias(self.value)
  return cairo_antialias_t(ret)

public lostanza defn set-dash (self:ref<Context>, dashes:ptr<double>, num_dashes:int, offset:double) -> ref<False> :
  w_cairo_set_dash(self.value, dashes, num_dashes, offset)
  return false

public lostanza defn get-dash-count (self:ref<Context>) -> ref<Int> :
  val ret = w_cairo_get_dash_count(self.value)
  return new Int{ret}

; @TODO - get-dashes

public lostanza defn set-fill-rule (self:ref<Context>, v:ref<cairo_fill_rule_t>) -> ref<False> :
  w_cairo_set_fill_rule(self.value, to-int(v).value)
  return false

public lostanza defn get-fill-rule (self:ref<Context>) -> ref<cairo_fill_rule_t> :
  val ret = w_cairo_get_fill_rule(self.value)
  return cairo_fill_rule_t(ret)

public lostanza defn set-line-cap (self:ref<Context>, v:ref<cairo_line_cap_t>) -> ref<False> :
  w_cairo_set_line_cap(self.value, to-int(v).value)
  return false

public lostanza defn get-line-cap (self:ref<Context>) -> ref<cairo_line_cap_t> :
  val ret = w_cairo_get_line_cap(self.value)
  return cairo_line_cap_t(ret)

public lostanza defn set-line-join (self:ref<Context>, v:ref<cairo_line_join_t>) -> ref<False> :
  w_cairo_set_line_join(self.value, to-int(v).value)
  return false

public lostanza defn get-line-join (self:ref<Context>) -> ref<cairo_line_join_t> :
  val ret = w_cairo_get_line_cap(self.value)
  return cairo_line_join_t(ret)

public lostanza defn set-line-width (self:ref<Context>, v:ref<Double>) -> ref<False> :
  w_cairo_set_line_width(self.value, v.value)
  return false

public lostanza defn get-line-width (self:ref<Context>) -> ref<Double> :
  val ret = w_cairo_get_line_width(self.value)
  return new Double{ret}

public lostanza defn set-miter-limit (self:ref<Context>, v:ref<Double>) -> ref<False> :
  w_cairo_set_miter_limit(self.value, v.value)
  return false

public lostanza defn get-miter-limit (self:ref<Context>) -> ref<Double> :
  val ret = w_cairo_get_miter_limit(self.value)
  return new Double{ret}

public lostanza defn set-operator (self:ref<Context>, v:ref<cairo_operator_t>) -> ref<False> :
  w_cairo_set_operator(self.value, to-int(v).value)
  return false

public lostanza defn get-operator (self:ref<Context>) -> ref<cairo_operator_t> :
  val ret = w_cairo_get_operator(self.value)
  return cairo_operator_t(ret)

public lostanza defn set-tolerance (self:ref<Context>, v:ref<Double>) -> ref<False> :
  w_cairo_set_tolerance(self.value, v.value)
  return false

public lostanza defn get-tolerance (self:ref<Context>) -> ref<Double> :
  val ret = w_cairo_get_tolerance(self.value)
  return new Double{ret}

public lostanza defn clip (self:ref<Context>) -> ref<False> :
  w_cairo_clip(self.value)
  return false

public lostanza defn clip-preserve (self:ref<Context>) -> ref<False> :
  w_cairo_clip_preserve(self.value)
  return false

public lostanza defn clip-extents (self:ref<Context>) -> ref<Rectangle> :
  val ret = Rectangle()
  w_cairo_clip_extents(self.value, addr!(ret.x), addr!(ret.y), addr!(ret.width), addr!(ret.height))
  return ret

public lostanza defn in-clip? (self:ref<Context>, x:ref<Double>, y:ref<Double>) -> ref<Int> :
  val ret = w_cairo_in_clip(self.value, x.value, y.value)
  return new Int{ret}

public lostanza defn reset-clip (self:ref<Context>) -> ref<False> :
  w_cairo_reset_clip(self.value)
  return false

public lostanza defn fill (self:ref<Context>) -> ref<False> :
  w_cairo_fill(self.value)
  return false

public lostanza defn fill-preserve (self:ref<Context>) -> ref<False> :
  w_cairo_fill_preserve(self.value)
  return false

public lostanza defn fill-extents (self:ref<Context>) -> ref<Rectangle> :
  val ret = Rectangle()
  w_cairo_fill_extents(self.value, addr!(ret.x), addr!(ret.y), addr!(ret.width), addr!(ret.height))
  return ret

public lostanza defn in-fill? (self:ref<Context>, x:ref<Double>, y:ref<Double>) -> ref<Int> :
  val ret = w_cairo_in_fill(self.value, x.value, y.value)
  return new Int{ret}

public lostanza defn mask (self:ref<Context>, pattern:ref<Pattern>) -> ref<False> :
  w_cairo_mask(self.value, pattern.value)
  return false

public lostanza defn mask (self:ref<Context>, surface:ref<Surface>, x:ref<Double>, y:ref<Double>) -> ref<False> :
  w_cairo_mask_surface(self.value, surface.value, x.value, y.value)
  return false

public lostanza defn paint (self:ref<Context>) -> ref<False> :
  w_cairo_paint(self.value)
  return false

public lostanza defn paint (self:ref<Context>, alpha:ref<Double>) -> ref<False> :
  w_cairo_paint_with_alpha(self.value, alpha.value)
  return false

public lostanza defn stroke (self:ref<Context>) -> ref<False> :
  w_cairo_stroke(self.value)
  return false

public lostanza defn stroke-preserve (self:ref<Context>) -> ref<False> :
  w_cairo_stroke_preserve(self.value)
  return false

public lostanza defn stroke-extents (self:ref<Context>) -> ref<Rectangle> :
  val ret = Rectangle()
  w_cairo_stroke_extents(self.value, addr!(ret.x), addr!(ret.y), addr!(ret.width), addr!(ret.height))
  return ret

public lostanza defn in-stroke? (self:ref<Context>, x:ref<Double>, y:ref<Double>) -> ref<Int> :
  val ret = w_cairo_in_stroke(self.value, x.value, y.value)
  return new Int{ret}

public lostanza defn copy-page (self:ref<Context>) -> ref<False> :
  w_cairo_copy_page(self.value)
  return false

public lostanza defn show-page (self:ref<Context>) -> ref<False> :
  w_cairo_show_page(self.value)
  return false

; get/set_user_data not implemented