; This file was auto-generated by lbstanza-wrapper
; Version 0.1.1
; Manual editing would be unwise
defpackage cairo/Wrapper :
  import core
  import core/dynamic-library

#if-defined(COMPILE-STATIC):
  extern cairo_version : () -> int
  extern cairo_version_string : () -> ptr<byte>
  extern cairo_create : (ptr<?>) -> ptr<?>
  extern cairo_reference : (ptr<?>) -> ptr<?>
  extern cairo_destroy : (ptr<?>) -> int  ;  void
  extern cairo_get_reference_count : (ptr<?>) -> int
  extern cairo_get_user_data : (ptr<?>,ptr<?>) -> ptr<?>
  extern cairo_set_user_data : (ptr<?>,ptr<?>,ptr<?>,ptr<( (ptr<?>) -> int )>) -> int
  extern cairo_save : (ptr<?>) -> int  ;  void
  extern cairo_restore : (ptr<?>) -> int  ;  void
  extern cairo_push_group : (ptr<?>) -> int  ;  void
  extern cairo_push_group_with_content : (ptr<?>,int) -> int  ;  void
  extern cairo_pop_group : (ptr<?>) -> ptr<?>
  extern cairo_pop_group_to_source : (ptr<?>) -> int  ;  void
  extern cairo_set_operator : (ptr<?>,int) -> int  ;  void
  extern cairo_set_source : (ptr<?>,ptr<?>) -> int  ;  void
  extern cairo_set_source_rgb : (ptr<?>,double,double,double) -> int  ;  void
  extern cairo_set_source_rgba : (ptr<?>,double,double,double,double) -> int  ;  void
  extern cairo_set_source_surface : (ptr<?>,ptr<?>,double,double) -> int  ;  void
  extern cairo_set_tolerance : (ptr<?>,double) -> int  ;  void
  extern cairo_set_antialias : (ptr<?>,int) -> int  ;  void
  extern cairo_set_fill_rule : (ptr<?>,int) -> int  ;  void
  extern cairo_set_line_width : (ptr<?>,double) -> int  ;  void
  extern cairo_set_line_cap : (ptr<?>,int) -> int  ;  void
  extern cairo_set_line_join : (ptr<?>,int) -> int  ;  void
  extern cairo_set_dash : (ptr<?>,ptr<double>,int,double) -> int  ;  void
  extern cairo_set_miter_limit : (ptr<?>,double) -> int  ;  void
  extern cairo_translate : (ptr<?>,double,double) -> int  ;  void
  extern cairo_scale : (ptr<?>,double,double) -> int  ;  void
  extern cairo_rotate : (ptr<?>,double) -> int  ;  void
  extern cairo_transform : (ptr<?>,ptr<?>) -> int  ;  void
  extern cairo_set_matrix : (ptr<?>,ptr<?>) -> int  ;  void
  extern cairo_identity_matrix : (ptr<?>) -> int  ;  void
  extern cairo_user_to_device : (ptr<?>,ptr<double>,ptr<double>) -> int  ;  void
  extern cairo_user_to_device_distance : (ptr<?>,ptr<double>,ptr<double>) -> int  ;  void
  extern cairo_device_to_user : (ptr<?>,ptr<double>,ptr<double>) -> int  ;  void
  extern cairo_device_to_user_distance : (ptr<?>,ptr<double>,ptr<double>) -> int  ;  void
  extern cairo_new_path : (ptr<?>) -> int  ;  void
  extern cairo_move_to : (ptr<?>,double,double) -> int  ;  void
  extern cairo_new_sub_path : (ptr<?>) -> int  ;  void
  extern cairo_line_to : (ptr<?>,double,double) -> int  ;  void
  extern cairo_curve_to : (ptr<?>,double,double,double,double,double,double) -> int  ;  void
  extern cairo_arc : (ptr<?>,double,double,double,double,double) -> int  ;  void
  extern cairo_arc_negative : (ptr<?>,double,double,double,double,double) -> int  ;  void
  extern cairo_rel_move_to : (ptr<?>,double,double) -> int  ;  void
  extern cairo_rel_line_to : (ptr<?>,double,double) -> int  ;  void
  extern cairo_rel_curve_to : (ptr<?>,double,double,double,double,double,double) -> int  ;  void
  extern cairo_rectangle : (ptr<?>,double,double,double,double) -> int  ;  void
  extern cairo_close_path : (ptr<?>) -> int  ;  void
  extern cairo_path_extents : (ptr<?>,ptr<double>,ptr<double>,ptr<double>,ptr<double>) -> int  ;  void
  extern cairo_paint : (ptr<?>) -> int  ;  void
  extern cairo_paint_with_alpha : (ptr<?>,double) -> int  ;  void
  extern cairo_mask : (ptr<?>,ptr<?>) -> int  ;  void
  extern cairo_mask_surface : (ptr<?>,ptr<?>,double,double) -> int  ;  void
  extern cairo_stroke : (ptr<?>) -> int  ;  void
  extern cairo_stroke_preserve : (ptr<?>) -> int  ;  void
  extern cairo_fill : (ptr<?>) -> int  ;  void
  extern cairo_fill_preserve : (ptr<?>) -> int  ;  void
  extern cairo_copy_page : (ptr<?>) -> int  ;  void
  extern cairo_show_page : (ptr<?>) -> int  ;  void
  extern cairo_in_stroke : (ptr<?>,double,double) -> int
  extern cairo_in_fill : (ptr<?>,double,double) -> int
  extern cairo_in_clip : (ptr<?>,double,double) -> int
  extern cairo_stroke_extents : (ptr<?>,ptr<double>,ptr<double>,ptr<double>,ptr<double>) -> int  ;  void
  extern cairo_fill_extents : (ptr<?>,ptr<double>,ptr<double>,ptr<double>,ptr<double>) -> int  ;  void
  extern cairo_reset_clip : (ptr<?>) -> int  ;  void
  extern cairo_clip : (ptr<?>) -> int  ;  void
  extern cairo_clip_preserve : (ptr<?>) -> int  ;  void
  extern cairo_clip_extents : (ptr<?>,ptr<double>,ptr<double>,ptr<double>,ptr<double>) -> int  ;  void
  extern cairo_copy_clip_rectangle_list : (ptr<?>) -> ptr<?>
  extern cairo_rectangle_list_destroy : (ptr<?>) -> int  ;  void
  extern cairo_glyph_allocate : (int) -> ptr<?>
  extern cairo_glyph_free : (ptr<?>) -> int  ;  void
  extern cairo_text_cluster_allocate : (int) -> ptr<?>
  extern cairo_text_cluster_free : (ptr<?>) -> int  ;  void
  extern cairo_font_options_create : () -> ptr<?>
  extern cairo_font_options_copy : (ptr<?>) -> ptr<?>
  extern cairo_font_options_destroy : (ptr<?>) -> int  ;  void
  extern cairo_font_options_status : (ptr<?>) -> int
  extern cairo_font_options_merge : (ptr<?>,ptr<?>) -> int  ;  void
  extern cairo_font_options_equal : (ptr<?>,ptr<?>) -> int
  extern cairo_font_options_hash : (ptr<?>) -> long
  extern cairo_font_options_set_antialias : (ptr<?>,int) -> int  ;  void
  extern cairo_font_options_get_antialias : (ptr<?>) -> int
  extern cairo_font_options_set_subpixel_order : (ptr<?>,int) -> int  ;  void
  extern cairo_font_options_get_subpixel_order : (ptr<?>) -> int
  extern cairo_font_options_set_hint_style : (ptr<?>,int) -> int  ;  void
  extern cairo_font_options_get_hint_style : (ptr<?>) -> int
  extern cairo_font_options_set_hint_metrics : (ptr<?>,int) -> int  ;  void
  extern cairo_font_options_get_hint_metrics : (ptr<?>) -> int
  extern cairo_select_font_face : (ptr<?>,ptr<byte>,int,int) -> int  ;  void
  extern cairo_set_font_size : (ptr<?>,double) -> int  ;  void
  extern cairo_set_font_matrix : (ptr<?>,ptr<?>) -> int  ;  void
  extern cairo_get_font_matrix : (ptr<?>,ptr<?>) -> int  ;  void
  extern cairo_set_font_options : (ptr<?>,ptr<?>) -> int  ;  void
  extern cairo_get_font_options : (ptr<?>,ptr<?>) -> int  ;  void
  extern cairo_set_font_face : (ptr<?>,ptr<?>) -> int  ;  void
  extern cairo_get_font_face : (ptr<?>) -> ptr<?>
  extern cairo_set_scaled_font : (ptr<?>,ptr<?>) -> int  ;  void
  extern cairo_get_scaled_font : (ptr<?>) -> ptr<?>
  extern cairo_show_text : (ptr<?>,ptr<byte>) -> int  ;  void
  extern cairo_show_glyphs : (ptr<?>,ptr<?>,int) -> int  ;  void
  extern cairo_show_text_glyphs : (ptr<?>,ptr<byte>,int,ptr<?>,int,ptr<?>,int,int) -> int  ;  void
  extern cairo_text_path : (ptr<?>,ptr<byte>) -> int  ;  void
  extern cairo_glyph_path : (ptr<?>,ptr<?>,int) -> int  ;  void
  extern cairo_text_extents : (ptr<?>,ptr<byte>,ptr<?>) -> int  ;  void
  extern cairo_glyph_extents : (ptr<?>,ptr<?>,int,ptr<?>) -> int  ;  void
  extern cairo_font_extents : (ptr<?>,ptr<?>) -> int  ;  void
  extern cairo_font_face_reference : (ptr<?>) -> ptr<?>
  extern cairo_font_face_destroy : (ptr<?>) -> int  ;  void
  extern cairo_font_face_get_reference_count : (ptr<?>) -> int
  extern cairo_font_face_status : (ptr<?>) -> int
  extern cairo_font_face_get_type : (ptr<?>) -> int
  extern cairo_font_face_get_user_data : (ptr<?>,ptr<?>) -> ptr<?>
  extern cairo_font_face_set_user_data : (ptr<?>,ptr<?>,ptr<?>,ptr<( (ptr<?>) -> int )>) -> int
  extern cairo_scaled_font_create : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern cairo_scaled_font_reference : (ptr<?>) -> ptr<?>
  extern cairo_scaled_font_destroy : (ptr<?>) -> int  ;  void
  extern cairo_scaled_font_get_reference_count : (ptr<?>) -> int
  extern cairo_scaled_font_status : (ptr<?>) -> int
  extern cairo_scaled_font_get_type : (ptr<?>) -> int
  extern cairo_scaled_font_get_user_data : (ptr<?>,ptr<?>) -> ptr<?>
  extern cairo_scaled_font_set_user_data : (ptr<?>,ptr<?>,ptr<?>,ptr<( (ptr<?>) -> int )>) -> int
  extern cairo_scaled_font_extents : (ptr<?>,ptr<?>) -> int  ;  void
  extern cairo_scaled_font_text_extents : (ptr<?>,ptr<byte>,ptr<?>) -> int  ;  void
  extern cairo_scaled_font_glyph_extents : (ptr<?>,ptr<?>,int,ptr<?>) -> int  ;  void
  extern cairo_scaled_font_text_to_glyphs : (ptr<?>,double,double,ptr<byte>,int,ptr<ptr<?>>,ptr<int>,ptr<ptr<?>>,ptr<int>,ptr<int>) -> int
  extern cairo_scaled_font_get_font_face : (ptr<?>) -> ptr<?>
  extern cairo_scaled_font_get_font_matrix : (ptr<?>,ptr<?>) -> int  ;  void
  extern cairo_scaled_font_get_ctm : (ptr<?>,ptr<?>) -> int  ;  void
  extern cairo_scaled_font_get_scale_matrix : (ptr<?>,ptr<?>) -> int  ;  void
  extern cairo_scaled_font_get_font_options : (ptr<?>,ptr<?>) -> int  ;  void
  extern cairo_toy_font_face_create : (ptr<byte>,int,int) -> ptr<?>
  extern cairo_toy_font_face_get_family : (ptr<?>) -> ptr<byte>
  extern cairo_toy_font_face_get_slant : (ptr<?>) -> int
  extern cairo_toy_font_face_get_weight : (ptr<?>) -> int
  extern cairo_user_font_face_create : () -> ptr<?>
  extern cairo_user_font_face_set_init_func : (ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>) -> int  ;  void
  extern cairo_user_font_face_set_render_glyph_func : (ptr<?>,ptr<( (ptr<?>,long,ptr<?>,ptr<?>) -> int )>) -> int  ;  void
  extern cairo_user_font_face_set_text_to_glyphs_func : (ptr<?>,ptr<( (ptr<?>,ptr<byte>,int,ptr<ptr<?>>,ptr<int>,ptr<ptr<?>>,ptr<int>,ptr<int>) -> int )>) -> int  ;  void
  extern cairo_user_font_face_set_unicode_to_glyph_func : (ptr<?>,ptr<( (ptr<?>,long,ptr<long>) -> int )>) -> int  ;  void
  extern cairo_user_font_face_get_init_func : (ptr<?>) -> ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>
  extern cairo_user_font_face_get_render_glyph_func : (ptr<?>) -> ptr<( (ptr<?>,long,ptr<?>,ptr<?>) -> int )>
  extern cairo_user_font_face_get_text_to_glyphs_func : (ptr<?>) -> ptr<( (ptr<?>,ptr<byte>,int,ptr<ptr<?>>,ptr<int>,ptr<ptr<?>>,ptr<int>,ptr<int>) -> int )>
  extern cairo_user_font_face_get_unicode_to_glyph_func : (ptr<?>) -> ptr<( (ptr<?>,long,ptr<long>) -> int )>
  extern cairo_get_operator : (ptr<?>) -> int
  extern cairo_get_source : (ptr<?>) -> ptr<?>
  extern cairo_get_tolerance : (ptr<?>) -> double
  extern cairo_get_antialias : (ptr<?>) -> int
  extern cairo_has_current_point : (ptr<?>) -> int
  extern cairo_get_current_point : (ptr<?>,ptr<double>,ptr<double>) -> int  ;  void
  extern cairo_get_fill_rule : (ptr<?>) -> int
  extern cairo_get_line_width : (ptr<?>) -> double
  extern cairo_get_line_cap : (ptr<?>) -> int
  extern cairo_get_line_join : (ptr<?>) -> int
  extern cairo_get_miter_limit : (ptr<?>) -> double
  extern cairo_get_dash_count : (ptr<?>) -> int
  extern cairo_get_dash : (ptr<?>,ptr<double>,ptr<double>) -> int  ;  void
  extern cairo_get_matrix : (ptr<?>,ptr<?>) -> int  ;  void
  extern cairo_get_target : (ptr<?>) -> ptr<?>
  extern cairo_get_group_target : (ptr<?>) -> ptr<?>
  extern cairo_copy_path : (ptr<?>) -> ptr<?>
  extern cairo_copy_path_flat : (ptr<?>) -> ptr<?>
  extern cairo_append_path : (ptr<?>,ptr<?>) -> int  ;  void
  extern cairo_path_destroy : (ptr<?>) -> int  ;  void
  extern cairo_status : (ptr<?>) -> int
  extern cairo_status_to_string : (int) -> ptr<byte>
  extern cairo_device_reference : (ptr<?>) -> ptr<?>
  extern cairo_device_get_type : (ptr<?>) -> int
  extern cairo_device_status : (ptr<?>) -> int
  extern cairo_device_acquire : (ptr<?>) -> int
  extern cairo_device_release : (ptr<?>) -> int  ;  void
  extern cairo_device_flush : (ptr<?>) -> int  ;  void
  extern cairo_device_finish : (ptr<?>) -> int  ;  void
  extern cairo_device_destroy : (ptr<?>) -> int  ;  void
  extern cairo_device_get_reference_count : (ptr<?>) -> int
  extern cairo_device_get_user_data : (ptr<?>,ptr<?>) -> ptr<?>
  extern cairo_device_set_user_data : (ptr<?>,ptr<?>,ptr<?>,ptr<( (ptr<?>) -> int )>) -> int
  extern cairo_surface_create_similar : (ptr<?>,int,int,int) -> ptr<?>
  extern cairo_surface_create_similar_image : (ptr<?>,int,int,int) -> ptr<?>
  extern cairo_surface_map_to_image : (ptr<?>,ptr<?>) -> ptr<?>
  extern cairo_surface_unmap_image : (ptr<?>,ptr<?>) -> int  ;  void
  extern cairo_surface_create_for_rectangle : (ptr<?>,double,double,double,double) -> ptr<?>
  extern cairo_surface_create_observer : (ptr<?>,int) -> ptr<?>
  extern cairo_surface_observer_add_paint_callback : (ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>,ptr<?>) -> int
  extern cairo_surface_observer_add_mask_callback : (ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>,ptr<?>) -> int
  extern cairo_surface_observer_add_fill_callback : (ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>,ptr<?>) -> int
  extern cairo_surface_observer_add_stroke_callback : (ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>,ptr<?>) -> int
  extern cairo_surface_observer_add_glyphs_callback : (ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>,ptr<?>) -> int
  extern cairo_surface_observer_add_flush_callback : (ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>,ptr<?>) -> int
  extern cairo_surface_observer_add_finish_callback : (ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>,ptr<?>) -> int
  extern cairo_surface_observer_print : (ptr<?>,ptr<( (ptr<?>,ptr<byte>,int) -> int )>,ptr<?>) -> int
  extern cairo_surface_observer_elapsed : (ptr<?>) -> double
  extern cairo_device_observer_print : (ptr<?>,ptr<( (ptr<?>,ptr<byte>,int) -> int )>,ptr<?>) -> int
  extern cairo_device_observer_elapsed : (ptr<?>) -> double
  extern cairo_device_observer_paint_elapsed : (ptr<?>) -> double
  extern cairo_device_observer_mask_elapsed : (ptr<?>) -> double
  extern cairo_device_observer_fill_elapsed : (ptr<?>) -> double
  extern cairo_device_observer_stroke_elapsed : (ptr<?>) -> double
  extern cairo_device_observer_glyphs_elapsed : (ptr<?>) -> double
  extern cairo_surface_reference : (ptr<?>) -> ptr<?>
  extern cairo_surface_finish : (ptr<?>) -> int  ;  void
  extern cairo_surface_destroy : (ptr<?>) -> int  ;  void
  extern cairo_surface_get_device : (ptr<?>) -> ptr<?>
  extern cairo_surface_get_reference_count : (ptr<?>) -> int
  extern cairo_surface_status : (ptr<?>) -> int
  extern cairo_surface_get_type : (ptr<?>) -> int
  extern cairo_surface_get_content : (ptr<?>) -> int
  extern cairo_surface_write_to_png : (ptr<?>,ptr<byte>) -> int
  extern cairo_surface_write_to_png_stream : (ptr<?>,ptr<( (ptr<?>,ptr<byte>,int) -> int )>,ptr<?>) -> int
  extern cairo_surface_get_user_data : (ptr<?>,ptr<?>) -> ptr<?>
  extern cairo_surface_set_user_data : (ptr<?>,ptr<?>,ptr<?>,ptr<( (ptr<?>) -> int )>) -> int
  extern cairo_surface_get_mime_data : (ptr<?>,ptr<byte>,ptr<ptr<byte>>,ptr<long>) -> int  ;  void
  extern cairo_surface_set_mime_data : (ptr<?>,ptr<byte>,ptr<byte>,long,ptr<( (ptr<?>) -> int )>,ptr<?>) -> int
  extern cairo_surface_supports_mime_type : (ptr<?>,ptr<byte>) -> int
  extern cairo_surface_get_font_options : (ptr<?>,ptr<?>) -> int  ;  void
  extern cairo_surface_flush : (ptr<?>) -> int  ;  void
  extern cairo_surface_mark_dirty : (ptr<?>) -> int  ;  void
  extern cairo_surface_mark_dirty_rectangle : (ptr<?>,int,int,int,int) -> int  ;  void
  extern cairo_surface_set_device_scale : (ptr<?>,double,double) -> int  ;  void
  extern cairo_surface_get_device_scale : (ptr<?>,ptr<double>,ptr<double>) -> int  ;  void
  extern cairo_surface_set_device_offset : (ptr<?>,double,double) -> int  ;  void
  extern cairo_surface_get_device_offset : (ptr<?>,ptr<double>,ptr<double>) -> int  ;  void
  extern cairo_surface_set_fallback_resolution : (ptr<?>,double,double) -> int  ;  void
  extern cairo_surface_get_fallback_resolution : (ptr<?>,ptr<double>,ptr<double>) -> int  ;  void
  extern cairo_surface_copy_page : (ptr<?>) -> int  ;  void
  extern cairo_surface_show_page : (ptr<?>) -> int  ;  void
  extern cairo_surface_has_show_text_glyphs : (ptr<?>) -> int
  extern cairo_image_surface_create : (int,int,int) -> ptr<?>
  extern cairo_format_stride_for_width : (int,int) -> int
  extern cairo_image_surface_create_for_data : (ptr<byte>,int,int,int,int) -> ptr<?>
  extern cairo_image_surface_get_data : (ptr<?>) -> ptr<byte>
  extern cairo_image_surface_get_format : (ptr<?>) -> int
  extern cairo_image_surface_get_width : (ptr<?>) -> int
  extern cairo_image_surface_get_height : (ptr<?>) -> int
  extern cairo_image_surface_get_stride : (ptr<?>) -> int
  extern cairo_image_surface_create_from_png : (ptr<byte>) -> ptr<?>
  extern cairo_image_surface_create_from_png_stream : (ptr<( (ptr<?>,ptr<byte>,int) -> int )>,ptr<?>) -> ptr<?>
  extern cairo_recording_surface_create : (int,ptr<?>) -> ptr<?>
  extern cairo_recording_surface_ink_extents : (ptr<?>,ptr<double>,ptr<double>,ptr<double>,ptr<double>) -> int  ;  void
  extern cairo_recording_surface_get_extents : (ptr<?>,ptr<?>) -> int
  extern cairo_pattern_create_raster_source : (ptr<?>,int,int,int) -> ptr<?>
  extern cairo_raster_source_pattern_set_callback_data : (ptr<?>,ptr<?>) -> int  ;  void
  extern cairo_raster_source_pattern_get_callback_data : (ptr<?>) -> ptr<?>
  extern cairo_raster_source_pattern_set_acquire : (ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?> )>,ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>) -> int  ;  void
  extern cairo_raster_source_pattern_get_acquire : (ptr<?>,ptr<ptr<( (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?> )>>,ptr<ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>>) -> int  ;  void
  extern cairo_raster_source_pattern_set_snapshot : (ptr<?>,ptr<( (ptr<?>,ptr<?>) -> int )>) -> int  ;  void
  extern cairo_raster_source_pattern_get_snapshot : (ptr<?>) -> ptr<( (ptr<?>,ptr<?>) -> int )>
  extern cairo_raster_source_pattern_set_copy : (ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>) -> int  ;  void
  extern cairo_raster_source_pattern_get_copy : (ptr<?>) -> ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>
  extern cairo_raster_source_pattern_set_finish : (ptr<?>,ptr<( (ptr<?>,ptr<?>) -> int )>) -> int  ;  void
  extern cairo_raster_source_pattern_get_finish : (ptr<?>) -> ptr<( (ptr<?>,ptr<?>) -> int )>
  extern cairo_pattern_create_rgb : (double,double,double) -> ptr<?>
  extern cairo_pattern_create_rgba : (double,double,double,double) -> ptr<?>
  extern cairo_pattern_create_for_surface : (ptr<?>) -> ptr<?>
  extern cairo_pattern_create_linear : (double,double,double,double) -> ptr<?>
  extern cairo_pattern_create_radial : (double,double,double,double,double,double) -> ptr<?>
  extern cairo_pattern_create_mesh : () -> ptr<?>
  extern cairo_pattern_reference : (ptr<?>) -> ptr<?>
  extern cairo_pattern_destroy : (ptr<?>) -> int  ;  void
  extern cairo_pattern_get_reference_count : (ptr<?>) -> int
  extern cairo_pattern_status : (ptr<?>) -> int
  extern cairo_pattern_get_user_data : (ptr<?>,ptr<?>) -> ptr<?>
  extern cairo_pattern_set_user_data : (ptr<?>,ptr<?>,ptr<?>,ptr<( (ptr<?>) -> int )>) -> int
  extern cairo_pattern_get_type : (ptr<?>) -> int
  extern cairo_pattern_add_color_stop_rgb : (ptr<?>,double,double,double,double) -> int  ;  void
  extern cairo_pattern_add_color_stop_rgba : (ptr<?>,double,double,double,double,double) -> int  ;  void
  extern cairo_mesh_pattern_begin_patch : (ptr<?>) -> int  ;  void
  extern cairo_mesh_pattern_end_patch : (ptr<?>) -> int  ;  void
  extern cairo_mesh_pattern_curve_to : (ptr<?>,double,double,double,double,double,double) -> int  ;  void
  extern cairo_mesh_pattern_line_to : (ptr<?>,double,double) -> int  ;  void
  extern cairo_mesh_pattern_move_to : (ptr<?>,double,double) -> int  ;  void
  extern cairo_mesh_pattern_set_control_point : (ptr<?>,int,double,double) -> int  ;  void
  extern cairo_mesh_pattern_set_corner_color_rgb : (ptr<?>,int,double,double,double) -> int  ;  void
  extern cairo_mesh_pattern_set_corner_color_rgba : (ptr<?>,int,double,double,double,double) -> int  ;  void
  extern cairo_pattern_set_matrix : (ptr<?>,ptr<?>) -> int  ;  void
  extern cairo_pattern_get_matrix : (ptr<?>,ptr<?>) -> int  ;  void
  extern cairo_pattern_set_extend : (ptr<?>,int) -> int  ;  void
  extern cairo_pattern_get_extend : (ptr<?>) -> int
  extern cairo_pattern_set_filter : (ptr<?>,int) -> int  ;  void
  extern cairo_pattern_get_filter : (ptr<?>) -> int
  extern cairo_pattern_get_rgba : (ptr<?>,ptr<double>,ptr<double>,ptr<double>,ptr<double>) -> int
  extern cairo_pattern_get_surface : (ptr<?>,ptr<ptr<?>>) -> int
  extern cairo_pattern_get_color_stop_rgba : (ptr<?>,int,ptr<double>,ptr<double>,ptr<double>,ptr<double>,ptr<double>) -> int
  extern cairo_pattern_get_color_stop_count : (ptr<?>,ptr<int>) -> int
  extern cairo_pattern_get_linear_points : (ptr<?>,ptr<double>,ptr<double>,ptr<double>,ptr<double>) -> int
  extern cairo_pattern_get_radial_circles : (ptr<?>,ptr<double>,ptr<double>,ptr<double>,ptr<double>,ptr<double>,ptr<double>) -> int
  extern cairo_mesh_pattern_get_patch_count : (ptr<?>,ptr<int>) -> int
  extern cairo_mesh_pattern_get_path : (ptr<?>,int) -> ptr<?>
  extern cairo_mesh_pattern_get_corner_color_rgba : (ptr<?>,int,int,ptr<double>,ptr<double>,ptr<double>,ptr<double>) -> int
  extern cairo_mesh_pattern_get_control_point : (ptr<?>,int,int,ptr<double>,ptr<double>) -> int
  extern cairo_matrix_init : (ptr<?>,double,double,double,double,double,double) -> int  ;  void
  extern cairo_matrix_init_identity : (ptr<?>) -> int  ;  void
  extern cairo_matrix_init_translate : (ptr<?>,double,double) -> int  ;  void
  extern cairo_matrix_init_scale : (ptr<?>,double,double) -> int  ;  void
  extern cairo_matrix_init_rotate : (ptr<?>,double) -> int  ;  void
  extern cairo_matrix_translate : (ptr<?>,double,double) -> int  ;  void
  extern cairo_matrix_scale : (ptr<?>,double,double) -> int  ;  void
  extern cairo_matrix_rotate : (ptr<?>,double) -> int  ;  void
  extern cairo_matrix_invert : (ptr<?>) -> int
  extern cairo_matrix_multiply : (ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern cairo_matrix_transform_distance : (ptr<?>,ptr<double>,ptr<double>) -> int  ;  void
  extern cairo_matrix_transform_point : (ptr<?>,ptr<double>,ptr<double>) -> int  ;  void
  extern cairo_region_create : () -> ptr<?>
  extern cairo_region_create_rectangle : (ptr<?>) -> ptr<?>
  extern cairo_region_create_rectangles : (ptr<?>,int) -> ptr<?>
  extern cairo_region_copy : (ptr<?>) -> ptr<?>
  extern cairo_region_reference : (ptr<?>) -> ptr<?>
  extern cairo_region_destroy : (ptr<?>) -> int  ;  void
  extern cairo_region_equal : (ptr<?>,ptr<?>) -> int
  extern cairo_region_status : (ptr<?>) -> int
  extern cairo_region_get_extents : (ptr<?>,ptr<?>) -> int  ;  void
  extern cairo_region_num_rectangles : (ptr<?>) -> int
  extern cairo_region_get_rectangle : (ptr<?>,int,ptr<?>) -> int  ;  void
  extern cairo_region_is_empty : (ptr<?>) -> int
  extern cairo_region_contains_rectangle : (ptr<?>,ptr<?>) -> int
  extern cairo_region_contains_point : (ptr<?>,int,int) -> int
  extern cairo_region_translate : (ptr<?>,int,int) -> int  ;  void
  extern cairo_region_subtract : (ptr<?>,ptr<?>) -> int
  extern cairo_region_subtract_rectangle : (ptr<?>,ptr<?>) -> int
  extern cairo_region_intersect : (ptr<?>,ptr<?>) -> int
  extern cairo_region_intersect_rectangle : (ptr<?>,ptr<?>) -> int
  extern cairo_region_union : (ptr<?>,ptr<?>) -> int
  extern cairo_region_union_rectangle : (ptr<?>,ptr<?>) -> int
  extern cairo_region_xor : (ptr<?>,ptr<?>) -> int
  extern cairo_region_xor_rectangle : (ptr<?>,ptr<?>) -> int
  extern cairo_debug_reset_static_data : () -> int  ;  void
  public lostanza defn w_cairo_version () -> int :
    val ret = call-c cairo_version()
    return ret
  public lostanza defn w_cairo_version_string () -> ptr<byte> :
    val ret = call-c cairo_version_string()
    return ret
  public lostanza defn w_cairo_create (target:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_create(target)
    return ret
  public lostanza defn w_cairo_reference (cr:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_reference(cr)
    return ret
  public lostanza defn w_cairo_destroy (cr:ptr<?>) -> ref<False> :
    call-c cairo_destroy(cr)
    return false
  public lostanza defn w_cairo_get_reference_count (cr:ptr<?>) -> int :
    val ret = call-c cairo_get_reference_count(cr)
    return ret
  public lostanza defn w_cairo_get_user_data (cr:ptr<?>, key:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_get_user_data(cr, key)
    return ret
  public lostanza defn w_cairo_set_user_data (cr:ptr<?>, key:ptr<?>, user_data:ptr<?>, destroy:ptr<( (ptr<?>) -> int )>) -> int :
    val ret = call-c cairo_set_user_data(cr, key, user_data, destroy)
    return ret
  public lostanza defn w_cairo_save (cr:ptr<?>) -> ref<False> :
    call-c cairo_save(cr)
    return false
  public lostanza defn w_cairo_restore (cr:ptr<?>) -> ref<False> :
    call-c cairo_restore(cr)
    return false
  public lostanza defn w_cairo_push_group (cr:ptr<?>) -> ref<False> :
    call-c cairo_push_group(cr)
    return false
  public lostanza defn w_cairo_push_group_with_content (cr:ptr<?>, content:int) -> ref<False> :
    call-c cairo_push_group_with_content(cr, content)
    return false
  public lostanza defn w_cairo_pop_group (cr:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_pop_group(cr)
    return ret
  public lostanza defn w_cairo_pop_group_to_source (cr:ptr<?>) -> ref<False> :
    call-c cairo_pop_group_to_source(cr)
    return false
  public lostanza defn w_cairo_set_operator (cr:ptr<?>, op:int) -> ref<False> :
    call-c cairo_set_operator(cr, op)
    return false
  public lostanza defn w_cairo_set_source (cr:ptr<?>, source:ptr<?>) -> ref<False> :
    call-c cairo_set_source(cr, source)
    return false
  public lostanza defn w_cairo_set_source_rgb (cr:ptr<?>, red:double, green:double, blue:double) -> ref<False> :
    call-c cairo_set_source_rgb(cr, red, green, blue)
    return false
  public lostanza defn w_cairo_set_source_rgba (cr:ptr<?>, red:double, green:double, blue:double, alpha:double) -> ref<False> :
    call-c cairo_set_source_rgba(cr, red, green, blue, alpha)
    return false
  public lostanza defn w_cairo_set_source_surface (cr:ptr<?>, surface:ptr<?>, x:double, y:double) -> ref<False> :
    call-c cairo_set_source_surface(cr, surface, x, y)
    return false
  public lostanza defn w_cairo_set_tolerance (cr:ptr<?>, tolerance:double) -> ref<False> :
    call-c cairo_set_tolerance(cr, tolerance)
    return false
  public lostanza defn w_cairo_set_antialias (cr:ptr<?>, antialias:int) -> ref<False> :
    call-c cairo_set_antialias(cr, antialias)
    return false
  public lostanza defn w_cairo_set_fill_rule (cr:ptr<?>, fill_rule:int) -> ref<False> :
    call-c cairo_set_fill_rule(cr, fill_rule)
    return false
  public lostanza defn w_cairo_set_line_width (cr:ptr<?>, width:double) -> ref<False> :
    call-c cairo_set_line_width(cr, width)
    return false
  public lostanza defn w_cairo_set_line_cap (cr:ptr<?>, line_cap:int) -> ref<False> :
    call-c cairo_set_line_cap(cr, line_cap)
    return false
  public lostanza defn w_cairo_set_line_join (cr:ptr<?>, line_join:int) -> ref<False> :
    call-c cairo_set_line_join(cr, line_join)
    return false
  public lostanza defn w_cairo_set_dash (cr:ptr<?>, dashes:ptr<double>, num_dashes:int, offset:double) -> ref<False> :
    call-c cairo_set_dash(cr, dashes, num_dashes, offset)
    return false
  public lostanza defn w_cairo_set_miter_limit (cr:ptr<?>, limit:double) -> ref<False> :
    call-c cairo_set_miter_limit(cr, limit)
    return false
  public lostanza defn w_cairo_translate (cr:ptr<?>, tx:double, ty:double) -> ref<False> :
    call-c cairo_translate(cr, tx, ty)
    return false
  public lostanza defn w_cairo_scale (cr:ptr<?>, sx:double, sy:double) -> ref<False> :
    call-c cairo_scale(cr, sx, sy)
    return false
  public lostanza defn w_cairo_rotate (cr:ptr<?>, angle:double) -> ref<False> :
    call-c cairo_rotate(cr, angle)
    return false
  public lostanza defn w_cairo_transform (cr:ptr<?>, matrix:ptr<?>) -> ref<False> :
    call-c cairo_transform(cr, matrix)
    return false
  public lostanza defn w_cairo_set_matrix (cr:ptr<?>, matrix:ptr<?>) -> ref<False> :
    call-c cairo_set_matrix(cr, matrix)
    return false
  public lostanza defn w_cairo_identity_matrix (cr:ptr<?>) -> ref<False> :
    call-c cairo_identity_matrix(cr)
    return false
  public lostanza defn w_cairo_user_to_device (cr:ptr<?>, x:ptr<double>, y:ptr<double>) -> ref<False> :
    call-c cairo_user_to_device(cr, x, y)
    return false
  public lostanza defn w_cairo_user_to_device_distance (cr:ptr<?>, dx:ptr<double>, dy:ptr<double>) -> ref<False> :
    call-c cairo_user_to_device_distance(cr, dx, dy)
    return false
  public lostanza defn w_cairo_device_to_user (cr:ptr<?>, x:ptr<double>, y:ptr<double>) -> ref<False> :
    call-c cairo_device_to_user(cr, x, y)
    return false
  public lostanza defn w_cairo_device_to_user_distance (cr:ptr<?>, dx:ptr<double>, dy:ptr<double>) -> ref<False> :
    call-c cairo_device_to_user_distance(cr, dx, dy)
    return false
  public lostanza defn w_cairo_new_path (cr:ptr<?>) -> ref<False> :
    call-c cairo_new_path(cr)
    return false
  public lostanza defn w_cairo_move_to (cr:ptr<?>, x:double, y:double) -> ref<False> :
    call-c cairo_move_to(cr, x, y)
    return false
  public lostanza defn w_cairo_new_sub_path (cr:ptr<?>) -> ref<False> :
    call-c cairo_new_sub_path(cr)
    return false
  public lostanza defn w_cairo_line_to (cr:ptr<?>, x:double, y:double) -> ref<False> :
    call-c cairo_line_to(cr, x, y)
    return false
  public lostanza defn w_cairo_curve_to (cr:ptr<?>, x1:double, y1:double, x2:double, y2:double, x3:double, y3:double) -> ref<False> :
    call-c cairo_curve_to(cr, x1, y1, x2, y2, x3, y3)
    return false
  public lostanza defn w_cairo_arc (cr:ptr<?>, xc:double, yc:double, radius:double, angle1:double, angle2:double) -> ref<False> :
    call-c cairo_arc(cr, xc, yc, radius, angle1, angle2)
    return false
  public lostanza defn w_cairo_arc_negative (cr:ptr<?>, xc:double, yc:double, radius:double, angle1:double, angle2:double) -> ref<False> :
    call-c cairo_arc_negative(cr, xc, yc, radius, angle1, angle2)
    return false
  public lostanza defn w_cairo_rel_move_to (cr:ptr<?>, dx:double, dy:double) -> ref<False> :
    call-c cairo_rel_move_to(cr, dx, dy)
    return false
  public lostanza defn w_cairo_rel_line_to (cr:ptr<?>, dx:double, dy:double) -> ref<False> :
    call-c cairo_rel_line_to(cr, dx, dy)
    return false
  public lostanza defn w_cairo_rel_curve_to (cr:ptr<?>, dx1:double, dy1:double, dx2:double, dy2:double, dx3:double, dy3:double) -> ref<False> :
    call-c cairo_rel_curve_to(cr, dx1, dy1, dx2, dy2, dx3, dy3)
    return false
  public lostanza defn w_cairo_rectangle (cr:ptr<?>, x:double, y:double, width:double, height:double) -> ref<False> :
    call-c cairo_rectangle(cr, x, y, width, height)
    return false
  public lostanza defn w_cairo_close_path (cr:ptr<?>) -> ref<False> :
    call-c cairo_close_path(cr)
    return false
  public lostanza defn w_cairo_path_extents (cr:ptr<?>, x1:ptr<double>, y1:ptr<double>, x2:ptr<double>, y2:ptr<double>) -> ref<False> :
    call-c cairo_path_extents(cr, x1, y1, x2, y2)
    return false
  public lostanza defn w_cairo_paint (cr:ptr<?>) -> ref<False> :
    call-c cairo_paint(cr)
    return false
  public lostanza defn w_cairo_paint_with_alpha (cr:ptr<?>, alpha:double) -> ref<False> :
    call-c cairo_paint_with_alpha(cr, alpha)
    return false
  public lostanza defn w_cairo_mask (cr:ptr<?>, pattern:ptr<?>) -> ref<False> :
    call-c cairo_mask(cr, pattern)
    return false
  public lostanza defn w_cairo_mask_surface (cr:ptr<?>, surface:ptr<?>, surface_x:double, surface_y:double) -> ref<False> :
    call-c cairo_mask_surface(cr, surface, surface_x, surface_y)
    return false
  public lostanza defn w_cairo_stroke (cr:ptr<?>) -> ref<False> :
    call-c cairo_stroke(cr)
    return false
  public lostanza defn w_cairo_stroke_preserve (cr:ptr<?>) -> ref<False> :
    call-c cairo_stroke_preserve(cr)
    return false
  public lostanza defn w_cairo_fill (cr:ptr<?>) -> ref<False> :
    call-c cairo_fill(cr)
    return false
  public lostanza defn w_cairo_fill_preserve (cr:ptr<?>) -> ref<False> :
    call-c cairo_fill_preserve(cr)
    return false
  public lostanza defn w_cairo_copy_page (cr:ptr<?>) -> ref<False> :
    call-c cairo_copy_page(cr)
    return false
  public lostanza defn w_cairo_show_page (cr:ptr<?>) -> ref<False> :
    call-c cairo_show_page(cr)
    return false
  public lostanza defn w_cairo_in_stroke (cr:ptr<?>, x:double, y:double) -> int :
    val ret = call-c cairo_in_stroke(cr, x, y)
    return ret
  public lostanza defn w_cairo_in_fill (cr:ptr<?>, x:double, y:double) -> int :
    val ret = call-c cairo_in_fill(cr, x, y)
    return ret
  public lostanza defn w_cairo_in_clip (cr:ptr<?>, x:double, y:double) -> int :
    val ret = call-c cairo_in_clip(cr, x, y)
    return ret
  public lostanza defn w_cairo_stroke_extents (cr:ptr<?>, x1:ptr<double>, y1:ptr<double>, x2:ptr<double>, y2:ptr<double>) -> ref<False> :
    call-c cairo_stroke_extents(cr, x1, y1, x2, y2)
    return false
  public lostanza defn w_cairo_fill_extents (cr:ptr<?>, x1:ptr<double>, y1:ptr<double>, x2:ptr<double>, y2:ptr<double>) -> ref<False> :
    call-c cairo_fill_extents(cr, x1, y1, x2, y2)
    return false
  public lostanza defn w_cairo_reset_clip (cr:ptr<?>) -> ref<False> :
    call-c cairo_reset_clip(cr)
    return false
  public lostanza defn w_cairo_clip (cr:ptr<?>) -> ref<False> :
    call-c cairo_clip(cr)
    return false
  public lostanza defn w_cairo_clip_preserve (cr:ptr<?>) -> ref<False> :
    call-c cairo_clip_preserve(cr)
    return false
  public lostanza defn w_cairo_clip_extents (cr:ptr<?>, x1:ptr<double>, y1:ptr<double>, x2:ptr<double>, y2:ptr<double>) -> ref<False> :
    call-c cairo_clip_extents(cr, x1, y1, x2, y2)
    return false
  public lostanza defn w_cairo_copy_clip_rectangle_list (cr:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_copy_clip_rectangle_list(cr)
    return ret
  public lostanza defn w_cairo_rectangle_list_destroy (rectangle_list:ptr<?>) -> ref<False> :
    call-c cairo_rectangle_list_destroy(rectangle_list)
    return false
  public lostanza defn w_cairo_glyph_allocate (num_glyphs:int) -> ptr<?> :
    val ret = call-c cairo_glyph_allocate(num_glyphs)
    return ret
  public lostanza defn w_cairo_glyph_free (glyphs:ptr<?>) -> ref<False> :
    call-c cairo_glyph_free(glyphs)
    return false
  public lostanza defn w_cairo_text_cluster_allocate (num_clusters:int) -> ptr<?> :
    val ret = call-c cairo_text_cluster_allocate(num_clusters)
    return ret
  public lostanza defn w_cairo_text_cluster_free (clusters:ptr<?>) -> ref<False> :
    call-c cairo_text_cluster_free(clusters)
    return false
  public lostanza defn w_cairo_font_options_create () -> ptr<?> :
    val ret = call-c cairo_font_options_create()
    return ret
  public lostanza defn w_cairo_font_options_copy (original:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_font_options_copy(original)
    return ret
  public lostanza defn w_cairo_font_options_destroy (options:ptr<?>) -> ref<False> :
    call-c cairo_font_options_destroy(options)
    return false
  public lostanza defn w_cairo_font_options_status (options:ptr<?>) -> int :
    val ret = call-c cairo_font_options_status(options)
    return ret
  public lostanza defn w_cairo_font_options_merge (options:ptr<?>, other:ptr<?>) -> ref<False> :
    call-c cairo_font_options_merge(options, other)
    return false
  public lostanza defn w_cairo_font_options_equal (options:ptr<?>, other:ptr<?>) -> int :
    val ret = call-c cairo_font_options_equal(options, other)
    return ret
  public lostanza defn w_cairo_font_options_hash (options:ptr<?>) -> long :
    val ret = call-c cairo_font_options_hash(options)
    return ret
  public lostanza defn w_cairo_font_options_set_antialias (options:ptr<?>, antialias:int) -> ref<False> :
    call-c cairo_font_options_set_antialias(options, antialias)
    return false
  public lostanza defn w_cairo_font_options_get_antialias (options:ptr<?>) -> int :
    val ret = call-c cairo_font_options_get_antialias(options)
    return ret
  public lostanza defn w_cairo_font_options_set_subpixel_order (options:ptr<?>, subpixel_order:int) -> ref<False> :
    call-c cairo_font_options_set_subpixel_order(options, subpixel_order)
    return false
  public lostanza defn w_cairo_font_options_get_subpixel_order (options:ptr<?>) -> int :
    val ret = call-c cairo_font_options_get_subpixel_order(options)
    return ret
  public lostanza defn w_cairo_font_options_set_hint_style (options:ptr<?>, hint_style:int) -> ref<False> :
    call-c cairo_font_options_set_hint_style(options, hint_style)
    return false
  public lostanza defn w_cairo_font_options_get_hint_style (options:ptr<?>) -> int :
    val ret = call-c cairo_font_options_get_hint_style(options)
    return ret
  public lostanza defn w_cairo_font_options_set_hint_metrics (options:ptr<?>, hint_metrics:int) -> ref<False> :
    call-c cairo_font_options_set_hint_metrics(options, hint_metrics)
    return false
  public lostanza defn w_cairo_font_options_get_hint_metrics (options:ptr<?>) -> int :
    val ret = call-c cairo_font_options_get_hint_metrics(options)
    return ret
  public lostanza defn w_cairo_select_font_face (cr:ptr<?>, family:ptr<byte>, slant:int, weight:int) -> ref<False> :
    call-c cairo_select_font_face(cr, family, slant, weight)
    return false
  public lostanza defn w_cairo_set_font_size (cr:ptr<?>, size:double) -> ref<False> :
    call-c cairo_set_font_size(cr, size)
    return false
  public lostanza defn w_cairo_set_font_matrix (cr:ptr<?>, matrix:ptr<?>) -> ref<False> :
    call-c cairo_set_font_matrix(cr, matrix)
    return false
  public lostanza defn w_cairo_get_font_matrix (cr:ptr<?>, matrix:ptr<?>) -> ref<False> :
    call-c cairo_get_font_matrix(cr, matrix)
    return false
  public lostanza defn w_cairo_set_font_options (cr:ptr<?>, options:ptr<?>) -> ref<False> :
    call-c cairo_set_font_options(cr, options)
    return false
  public lostanza defn w_cairo_get_font_options (cr:ptr<?>, options:ptr<?>) -> ref<False> :
    call-c cairo_get_font_options(cr, options)
    return false
  public lostanza defn w_cairo_set_font_face (cr:ptr<?>, font_face:ptr<?>) -> ref<False> :
    call-c cairo_set_font_face(cr, font_face)
    return false
  public lostanza defn w_cairo_get_font_face (cr:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_get_font_face(cr)
    return ret
  public lostanza defn w_cairo_set_scaled_font (cr:ptr<?>, scaled_font:ptr<?>) -> ref<False> :
    call-c cairo_set_scaled_font(cr, scaled_font)
    return false
  public lostanza defn w_cairo_get_scaled_font (cr:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_get_scaled_font(cr)
    return ret
  public lostanza defn w_cairo_show_text (cr:ptr<?>, utf8:ptr<byte>) -> ref<False> :
    call-c cairo_show_text(cr, utf8)
    return false
  public lostanza defn w_cairo_show_glyphs (cr:ptr<?>, glyphs:ptr<?>, num_glyphs:int) -> ref<False> :
    call-c cairo_show_glyphs(cr, glyphs, num_glyphs)
    return false
  public lostanza defn w_cairo_show_text_glyphs (cr:ptr<?>, utf8:ptr<byte>, utf8_len:int, glyphs:ptr<?>, num_glyphs:int, clusters:ptr<?>, num_clusters:int, cluster_flags:int) -> ref<False> :
    call-c cairo_show_text_glyphs(cr, utf8, utf8_len, glyphs, num_glyphs, clusters, num_clusters, cluster_flags)
    return false
  public lostanza defn w_cairo_text_path (cr:ptr<?>, utf8:ptr<byte>) -> ref<False> :
    call-c cairo_text_path(cr, utf8)
    return false
  public lostanza defn w_cairo_glyph_path (cr:ptr<?>, glyphs:ptr<?>, num_glyphs:int) -> ref<False> :
    call-c cairo_glyph_path(cr, glyphs, num_glyphs)
    return false
  public lostanza defn w_cairo_text_extents (cr:ptr<?>, utf8:ptr<byte>, extents:ptr<?>) -> ref<False> :
    call-c cairo_text_extents(cr, utf8, extents)
    return false
  public lostanza defn w_cairo_glyph_extents (cr:ptr<?>, glyphs:ptr<?>, num_glyphs:int, extents:ptr<?>) -> ref<False> :
    call-c cairo_glyph_extents(cr, glyphs, num_glyphs, extents)
    return false
  public lostanza defn w_cairo_font_extents (cr:ptr<?>, extents:ptr<?>) -> ref<False> :
    call-c cairo_font_extents(cr, extents)
    return false
  public lostanza defn w_cairo_font_face_reference (font_face:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_font_face_reference(font_face)
    return ret
  public lostanza defn w_cairo_font_face_destroy (font_face:ptr<?>) -> ref<False> :
    call-c cairo_font_face_destroy(font_face)
    return false
  public lostanza defn w_cairo_font_face_get_reference_count (font_face:ptr<?>) -> int :
    val ret = call-c cairo_font_face_get_reference_count(font_face)
    return ret
  public lostanza defn w_cairo_font_face_status (font_face:ptr<?>) -> int :
    val ret = call-c cairo_font_face_status(font_face)
    return ret
  public lostanza defn w_cairo_font_face_get_type (font_face:ptr<?>) -> int :
    val ret = call-c cairo_font_face_get_type(font_face)
    return ret
  public lostanza defn w_cairo_font_face_get_user_data (font_face:ptr<?>, key:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_font_face_get_user_data(font_face, key)
    return ret
  public lostanza defn w_cairo_font_face_set_user_data (font_face:ptr<?>, key:ptr<?>, user_data:ptr<?>, destroy:ptr<( (ptr<?>) -> int )>) -> int :
    val ret = call-c cairo_font_face_set_user_data(font_face, key, user_data, destroy)
    return ret
  public lostanza defn w_cairo_scaled_font_create (font_face:ptr<?>, font_matrix:ptr<?>, ctm:ptr<?>, options:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_scaled_font_create(font_face, font_matrix, ctm, options)
    return ret
  public lostanza defn w_cairo_scaled_font_reference (scaled_font:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_scaled_font_reference(scaled_font)
    return ret
  public lostanza defn w_cairo_scaled_font_destroy (scaled_font:ptr<?>) -> ref<False> :
    call-c cairo_scaled_font_destroy(scaled_font)
    return false
  public lostanza defn w_cairo_scaled_font_get_reference_count (scaled_font:ptr<?>) -> int :
    val ret = call-c cairo_scaled_font_get_reference_count(scaled_font)
    return ret
  public lostanza defn w_cairo_scaled_font_status (scaled_font:ptr<?>) -> int :
    val ret = call-c cairo_scaled_font_status(scaled_font)
    return ret
  public lostanza defn w_cairo_scaled_font_get_type (scaled_font:ptr<?>) -> int :
    val ret = call-c cairo_scaled_font_get_type(scaled_font)
    return ret
  public lostanza defn w_cairo_scaled_font_get_user_data (scaled_font:ptr<?>, key:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_scaled_font_get_user_data(scaled_font, key)
    return ret
  public lostanza defn w_cairo_scaled_font_set_user_data (scaled_font:ptr<?>, key:ptr<?>, user_data:ptr<?>, destroy:ptr<( (ptr<?>) -> int )>) -> int :
    val ret = call-c cairo_scaled_font_set_user_data(scaled_font, key, user_data, destroy)
    return ret
  public lostanza defn w_cairo_scaled_font_extents (scaled_font:ptr<?>, extents:ptr<?>) -> ref<False> :
    call-c cairo_scaled_font_extents(scaled_font, extents)
    return false
  public lostanza defn w_cairo_scaled_font_text_extents (scaled_font:ptr<?>, utf8:ptr<byte>, extents:ptr<?>) -> ref<False> :
    call-c cairo_scaled_font_text_extents(scaled_font, utf8, extents)
    return false
  public lostanza defn w_cairo_scaled_font_glyph_extents (scaled_font:ptr<?>, glyphs:ptr<?>, num_glyphs:int, extents:ptr<?>) -> ref<False> :
    call-c cairo_scaled_font_glyph_extents(scaled_font, glyphs, num_glyphs, extents)
    return false
  public lostanza defn w_cairo_scaled_font_text_to_glyphs (scaled_font:ptr<?>, x:double, y:double, utf8:ptr<byte>, utf8_len:int, glyphs:ptr<ptr<?>>, num_glyphs:ptr<int>, clusters:ptr<ptr<?>>, num_clusters:ptr<int>, cluster_flags:ptr<int>) -> int :
    val ret = call-c cairo_scaled_font_text_to_glyphs(scaled_font, x, y, utf8, utf8_len, glyphs, num_glyphs, clusters, num_clusters, cluster_flags)
    return ret
  public lostanza defn w_cairo_scaled_font_get_font_face (scaled_font:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_scaled_font_get_font_face(scaled_font)
    return ret
  public lostanza defn w_cairo_scaled_font_get_font_matrix (scaled_font:ptr<?>, font_matrix:ptr<?>) -> ref<False> :
    call-c cairo_scaled_font_get_font_matrix(scaled_font, font_matrix)
    return false
  public lostanza defn w_cairo_scaled_font_get_ctm (scaled_font:ptr<?>, ctm:ptr<?>) -> ref<False> :
    call-c cairo_scaled_font_get_ctm(scaled_font, ctm)
    return false
  public lostanza defn w_cairo_scaled_font_get_scale_matrix (scaled_font:ptr<?>, scale_matrix:ptr<?>) -> ref<False> :
    call-c cairo_scaled_font_get_scale_matrix(scaled_font, scale_matrix)
    return false
  public lostanza defn w_cairo_scaled_font_get_font_options (scaled_font:ptr<?>, options:ptr<?>) -> ref<False> :
    call-c cairo_scaled_font_get_font_options(scaled_font, options)
    return false
  public lostanza defn w_cairo_toy_font_face_create (family:ptr<byte>, slant:int, weight:int) -> ptr<?> :
    val ret = call-c cairo_toy_font_face_create(family, slant, weight)
    return ret
  public lostanza defn w_cairo_toy_font_face_get_family (font_face:ptr<?>) -> ptr<byte> :
    val ret = call-c cairo_toy_font_face_get_family(font_face)
    return ret
  public lostanza defn w_cairo_toy_font_face_get_slant (font_face:ptr<?>) -> int :
    val ret = call-c cairo_toy_font_face_get_slant(font_face)
    return ret
  public lostanza defn w_cairo_toy_font_face_get_weight (font_face:ptr<?>) -> int :
    val ret = call-c cairo_toy_font_face_get_weight(font_face)
    return ret
  public lostanza defn w_cairo_user_font_face_create () -> ptr<?> :
    val ret = call-c cairo_user_font_face_create()
    return ret
  public lostanza defn w_cairo_user_font_face_set_init_func (font_face:ptr<?>, init_func:ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>) -> ref<False> :
    call-c cairo_user_font_face_set_init_func(font_face, init_func)
    return false
  public lostanza defn w_cairo_user_font_face_set_render_glyph_func (font_face:ptr<?>, render_glyph_func:ptr<( (ptr<?>,long,ptr<?>,ptr<?>) -> int )>) -> ref<False> :
    call-c cairo_user_font_face_set_render_glyph_func(font_face, render_glyph_func)
    return false
  public lostanza defn w_cairo_user_font_face_set_text_to_glyphs_func (font_face:ptr<?>, text_to_glyphs_func:ptr<( (ptr<?>,ptr<byte>,int,ptr<ptr<?>>,ptr<int>,ptr<ptr<?>>,ptr<int>,ptr<int>) -> int )>) -> ref<False> :
    call-c cairo_user_font_face_set_text_to_glyphs_func(font_face, text_to_glyphs_func)
    return false
  public lostanza defn w_cairo_user_font_face_set_unicode_to_glyph_func (font_face:ptr<?>, unicode_to_glyph_func:ptr<( (ptr<?>,long,ptr<long>) -> int )>) -> ref<False> :
    call-c cairo_user_font_face_set_unicode_to_glyph_func(font_face, unicode_to_glyph_func)
    return false
  public lostanza defn w_cairo_user_font_face_get_init_func (font_face:ptr<?>) -> ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )> :
    val ret = call-c cairo_user_font_face_get_init_func(font_face)
    return ret
  public lostanza defn w_cairo_user_font_face_get_render_glyph_func (font_face:ptr<?>) -> ptr<( (ptr<?>,long,ptr<?>,ptr<?>) -> int )> :
    val ret = call-c cairo_user_font_face_get_render_glyph_func(font_face)
    return ret
  public lostanza defn w_cairo_user_font_face_get_text_to_glyphs_func (font_face:ptr<?>) -> ptr<( (ptr<?>,ptr<byte>,int,ptr<ptr<?>>,ptr<int>,ptr<ptr<?>>,ptr<int>,ptr<int>) -> int )> :
    val ret = call-c cairo_user_font_face_get_text_to_glyphs_func(font_face)
    return ret
  public lostanza defn w_cairo_user_font_face_get_unicode_to_glyph_func (font_face:ptr<?>) -> ptr<( (ptr<?>,long,ptr<long>) -> int )> :
    val ret = call-c cairo_user_font_face_get_unicode_to_glyph_func(font_face)
    return ret
  public lostanza defn w_cairo_get_operator (cr:ptr<?>) -> int :
    val ret = call-c cairo_get_operator(cr)
    return ret
  public lostanza defn w_cairo_get_source (cr:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_get_source(cr)
    return ret
  public lostanza defn w_cairo_get_tolerance (cr:ptr<?>) -> double :
    val ret = call-c cairo_get_tolerance(cr)
    return ret
  public lostanza defn w_cairo_get_antialias (cr:ptr<?>) -> int :
    val ret = call-c cairo_get_antialias(cr)
    return ret
  public lostanza defn w_cairo_has_current_point (cr:ptr<?>) -> int :
    val ret = call-c cairo_has_current_point(cr)
    return ret
  public lostanza defn w_cairo_get_current_point (cr:ptr<?>, x:ptr<double>, y:ptr<double>) -> ref<False> :
    call-c cairo_get_current_point(cr, x, y)
    return false
  public lostanza defn w_cairo_get_fill_rule (cr:ptr<?>) -> int :
    val ret = call-c cairo_get_fill_rule(cr)
    return ret
  public lostanza defn w_cairo_get_line_width (cr:ptr<?>) -> double :
    val ret = call-c cairo_get_line_width(cr)
    return ret
  public lostanza defn w_cairo_get_line_cap (cr:ptr<?>) -> int :
    val ret = call-c cairo_get_line_cap(cr)
    return ret
  public lostanza defn w_cairo_get_line_join (cr:ptr<?>) -> int :
    val ret = call-c cairo_get_line_join(cr)
    return ret
  public lostanza defn w_cairo_get_miter_limit (cr:ptr<?>) -> double :
    val ret = call-c cairo_get_miter_limit(cr)
    return ret
  public lostanza defn w_cairo_get_dash_count (cr:ptr<?>) -> int :
    val ret = call-c cairo_get_dash_count(cr)
    return ret
  public lostanza defn w_cairo_get_dash (cr:ptr<?>, dashes:ptr<double>, offset:ptr<double>) -> ref<False> :
    call-c cairo_get_dash(cr, dashes, offset)
    return false
  public lostanza defn w_cairo_get_matrix (cr:ptr<?>, matrix:ptr<?>) -> ref<False> :
    call-c cairo_get_matrix(cr, matrix)
    return false
  public lostanza defn w_cairo_get_target (cr:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_get_target(cr)
    return ret
  public lostanza defn w_cairo_get_group_target (cr:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_get_group_target(cr)
    return ret
  public lostanza defn w_cairo_copy_path (cr:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_copy_path(cr)
    return ret
  public lostanza defn w_cairo_copy_path_flat (cr:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_copy_path_flat(cr)
    return ret
  public lostanza defn w_cairo_append_path (cr:ptr<?>, path:ptr<?>) -> ref<False> :
    call-c cairo_append_path(cr, path)
    return false
  public lostanza defn w_cairo_path_destroy (path:ptr<?>) -> ref<False> :
    call-c cairo_path_destroy(path)
    return false
  public lostanza defn w_cairo_status (cr:ptr<?>) -> int :
    val ret = call-c cairo_status(cr)
    return ret
  public lostanza defn w_cairo_status_to_string (status:int) -> ptr<byte> :
    val ret = call-c cairo_status_to_string(status)
    return ret
  public lostanza defn w_cairo_device_reference (device:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_device_reference(device)
    return ret
  public lostanza defn w_cairo_device_get_type (device:ptr<?>) -> int :
    val ret = call-c cairo_device_get_type(device)
    return ret
  public lostanza defn w_cairo_device_status (device:ptr<?>) -> int :
    val ret = call-c cairo_device_status(device)
    return ret
  public lostanza defn w_cairo_device_acquire (device:ptr<?>) -> int :
    val ret = call-c cairo_device_acquire(device)
    return ret
  public lostanza defn w_cairo_device_release (device:ptr<?>) -> ref<False> :
    call-c cairo_device_release(device)
    return false
  public lostanza defn w_cairo_device_flush (device:ptr<?>) -> ref<False> :
    call-c cairo_device_flush(device)
    return false
  public lostanza defn w_cairo_device_finish (device:ptr<?>) -> ref<False> :
    call-c cairo_device_finish(device)
    return false
  public lostanza defn w_cairo_device_destroy (device:ptr<?>) -> ref<False> :
    call-c cairo_device_destroy(device)
    return false
  public lostanza defn w_cairo_device_get_reference_count (device:ptr<?>) -> int :
    val ret = call-c cairo_device_get_reference_count(device)
    return ret
  public lostanza defn w_cairo_device_get_user_data (device:ptr<?>, key:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_device_get_user_data(device, key)
    return ret
  public lostanza defn w_cairo_device_set_user_data (device:ptr<?>, key:ptr<?>, user_data:ptr<?>, destroy:ptr<( (ptr<?>) -> int )>) -> int :
    val ret = call-c cairo_device_set_user_data(device, key, user_data, destroy)
    return ret
  public lostanza defn w_cairo_surface_create_similar (other:ptr<?>, content:int, width:int, height:int) -> ptr<?> :
    val ret = call-c cairo_surface_create_similar(other, content, width, height)
    return ret
  public lostanza defn w_cairo_surface_create_similar_image (other:ptr<?>, format:int, width:int, height:int) -> ptr<?> :
    val ret = call-c cairo_surface_create_similar_image(other, format, width, height)
    return ret
  public lostanza defn w_cairo_surface_map_to_image (surface:ptr<?>, extents:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_surface_map_to_image(surface, extents)
    return ret
  public lostanza defn w_cairo_surface_unmap_image (surface:ptr<?>, image:ptr<?>) -> ref<False> :
    call-c cairo_surface_unmap_image(surface, image)
    return false
  public lostanza defn w_cairo_surface_create_for_rectangle (target:ptr<?>, x:double, y:double, width:double, height:double) -> ptr<?> :
    val ret = call-c cairo_surface_create_for_rectangle(target, x, y, width, height)
    return ret
  public lostanza defn w_cairo_surface_create_observer (target:ptr<?>, mode:int) -> ptr<?> :
    val ret = call-c cairo_surface_create_observer(target, mode)
    return ret
  public lostanza defn w_cairo_surface_observer_add_paint_callback (abstract_surface:ptr<?>, func:ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>, data:ptr<?>) -> int :
    val ret = call-c cairo_surface_observer_add_paint_callback(abstract_surface, func, data)
    return ret
  public lostanza defn w_cairo_surface_observer_add_mask_callback (abstract_surface:ptr<?>, func:ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>, data:ptr<?>) -> int :
    val ret = call-c cairo_surface_observer_add_mask_callback(abstract_surface, func, data)
    return ret
  public lostanza defn w_cairo_surface_observer_add_fill_callback (abstract_surface:ptr<?>, func:ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>, data:ptr<?>) -> int :
    val ret = call-c cairo_surface_observer_add_fill_callback(abstract_surface, func, data)
    return ret
  public lostanza defn w_cairo_surface_observer_add_stroke_callback (abstract_surface:ptr<?>, func:ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>, data:ptr<?>) -> int :
    val ret = call-c cairo_surface_observer_add_stroke_callback(abstract_surface, func, data)
    return ret
  public lostanza defn w_cairo_surface_observer_add_glyphs_callback (abstract_surface:ptr<?>, func:ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>, data:ptr<?>) -> int :
    val ret = call-c cairo_surface_observer_add_glyphs_callback(abstract_surface, func, data)
    return ret
  public lostanza defn w_cairo_surface_observer_add_flush_callback (abstract_surface:ptr<?>, func:ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>, data:ptr<?>) -> int :
    val ret = call-c cairo_surface_observer_add_flush_callback(abstract_surface, func, data)
    return ret
  public lostanza defn w_cairo_surface_observer_add_finish_callback (abstract_surface:ptr<?>, func:ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>, data:ptr<?>) -> int :
    val ret = call-c cairo_surface_observer_add_finish_callback(abstract_surface, func, data)
    return ret
  public lostanza defn w_cairo_surface_observer_print (surface:ptr<?>, write_func:ptr<( (ptr<?>,ptr<byte>,int) -> int )>, closure:ptr<?>) -> int :
    val ret = call-c cairo_surface_observer_print(surface, write_func, closure)
    return ret
  public lostanza defn w_cairo_surface_observer_elapsed (surface:ptr<?>) -> double :
    val ret = call-c cairo_surface_observer_elapsed(surface)
    return ret
  public lostanza defn w_cairo_device_observer_print (device:ptr<?>, write_func:ptr<( (ptr<?>,ptr<byte>,int) -> int )>, closure:ptr<?>) -> int :
    val ret = call-c cairo_device_observer_print(device, write_func, closure)
    return ret
  public lostanza defn w_cairo_device_observer_elapsed (device:ptr<?>) -> double :
    val ret = call-c cairo_device_observer_elapsed(device)
    return ret
  public lostanza defn w_cairo_device_observer_paint_elapsed (device:ptr<?>) -> double :
    val ret = call-c cairo_device_observer_paint_elapsed(device)
    return ret
  public lostanza defn w_cairo_device_observer_mask_elapsed (device:ptr<?>) -> double :
    val ret = call-c cairo_device_observer_mask_elapsed(device)
    return ret
  public lostanza defn w_cairo_device_observer_fill_elapsed (device:ptr<?>) -> double :
    val ret = call-c cairo_device_observer_fill_elapsed(device)
    return ret
  public lostanza defn w_cairo_device_observer_stroke_elapsed (device:ptr<?>) -> double :
    val ret = call-c cairo_device_observer_stroke_elapsed(device)
    return ret
  public lostanza defn w_cairo_device_observer_glyphs_elapsed (device:ptr<?>) -> double :
    val ret = call-c cairo_device_observer_glyphs_elapsed(device)
    return ret
  public lostanza defn w_cairo_surface_reference (surface:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_surface_reference(surface)
    return ret
  public lostanza defn w_cairo_surface_finish (surface:ptr<?>) -> ref<False> :
    call-c cairo_surface_finish(surface)
    return false
  public lostanza defn w_cairo_surface_destroy (surface:ptr<?>) -> ref<False> :
    call-c cairo_surface_destroy(surface)
    return false
  public lostanza defn w_cairo_surface_get_device (surface:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_surface_get_device(surface)
    return ret
  public lostanza defn w_cairo_surface_get_reference_count (surface:ptr<?>) -> int :
    val ret = call-c cairo_surface_get_reference_count(surface)
    return ret
  public lostanza defn w_cairo_surface_status (surface:ptr<?>) -> int :
    val ret = call-c cairo_surface_status(surface)
    return ret
  public lostanza defn w_cairo_surface_get_type (surface:ptr<?>) -> int :
    val ret = call-c cairo_surface_get_type(surface)
    return ret
  public lostanza defn w_cairo_surface_get_content (surface:ptr<?>) -> int :
    val ret = call-c cairo_surface_get_content(surface)
    return ret
  public lostanza defn w_cairo_surface_write_to_png (surface:ptr<?>, filename:ptr<byte>) -> int :
    val ret = call-c cairo_surface_write_to_png(surface, filename)
    return ret
  public lostanza defn w_cairo_surface_write_to_png_stream (surface:ptr<?>, write_func:ptr<( (ptr<?>,ptr<byte>,int) -> int )>, closure:ptr<?>) -> int :
    val ret = call-c cairo_surface_write_to_png_stream(surface, write_func, closure)
    return ret
  public lostanza defn w_cairo_surface_get_user_data (surface:ptr<?>, key:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_surface_get_user_data(surface, key)
    return ret
  public lostanza defn w_cairo_surface_set_user_data (surface:ptr<?>, key:ptr<?>, user_data:ptr<?>, destroy:ptr<( (ptr<?>) -> int )>) -> int :
    val ret = call-c cairo_surface_set_user_data(surface, key, user_data, destroy)
    return ret
  public lostanza defn w_cairo_surface_get_mime_data (surface:ptr<?>, mime_type:ptr<byte>, data:ptr<ptr<byte>>, length:ptr<long>) -> ref<False> :
    call-c cairo_surface_get_mime_data(surface, mime_type, data, length)
    return false
  public lostanza defn w_cairo_surface_set_mime_data (surface:ptr<?>, mime_type:ptr<byte>, data:ptr<byte>, length:long, destroy:ptr<( (ptr<?>) -> int )>, closure:ptr<?>) -> int :
    val ret = call-c cairo_surface_set_mime_data(surface, mime_type, data, length, destroy, closure)
    return ret
  public lostanza defn w_cairo_surface_supports_mime_type (surface:ptr<?>, mime_type:ptr<byte>) -> int :
    val ret = call-c cairo_surface_supports_mime_type(surface, mime_type)
    return ret
  public lostanza defn w_cairo_surface_get_font_options (surface:ptr<?>, options:ptr<?>) -> ref<False> :
    call-c cairo_surface_get_font_options(surface, options)
    return false
  public lostanza defn w_cairo_surface_flush (surface:ptr<?>) -> ref<False> :
    call-c cairo_surface_flush(surface)
    return false
  public lostanza defn w_cairo_surface_mark_dirty (surface:ptr<?>) -> ref<False> :
    call-c cairo_surface_mark_dirty(surface)
    return false
  public lostanza defn w_cairo_surface_mark_dirty_rectangle (surface:ptr<?>, x:int, y:int, width:int, height:int) -> ref<False> :
    call-c cairo_surface_mark_dirty_rectangle(surface, x, y, width, height)
    return false
  public lostanza defn w_cairo_surface_set_device_scale (surface:ptr<?>, x_scale:double, y_scale:double) -> ref<False> :
    call-c cairo_surface_set_device_scale(surface, x_scale, y_scale)
    return false
  public lostanza defn w_cairo_surface_get_device_scale (surface:ptr<?>, x_scale:ptr<double>, y_scale:ptr<double>) -> ref<False> :
    call-c cairo_surface_get_device_scale(surface, x_scale, y_scale)
    return false
  public lostanza defn w_cairo_surface_set_device_offset (surface:ptr<?>, x_offset:double, y_offset:double) -> ref<False> :
    call-c cairo_surface_set_device_offset(surface, x_offset, y_offset)
    return false
  public lostanza defn w_cairo_surface_get_device_offset (surface:ptr<?>, x_offset:ptr<double>, y_offset:ptr<double>) -> ref<False> :
    call-c cairo_surface_get_device_offset(surface, x_offset, y_offset)
    return false
  public lostanza defn w_cairo_surface_set_fallback_resolution (surface:ptr<?>, x_pixels_per_inch:double, y_pixels_per_inch:double) -> ref<False> :
    call-c cairo_surface_set_fallback_resolution(surface, x_pixels_per_inch, y_pixels_per_inch)
    return false
  public lostanza defn w_cairo_surface_get_fallback_resolution (surface:ptr<?>, x_pixels_per_inch:ptr<double>, y_pixels_per_inch:ptr<double>) -> ref<False> :
    call-c cairo_surface_get_fallback_resolution(surface, x_pixels_per_inch, y_pixels_per_inch)
    return false
  public lostanza defn w_cairo_surface_copy_page (surface:ptr<?>) -> ref<False> :
    call-c cairo_surface_copy_page(surface)
    return false
  public lostanza defn w_cairo_surface_show_page (surface:ptr<?>) -> ref<False> :
    call-c cairo_surface_show_page(surface)
    return false
  public lostanza defn w_cairo_surface_has_show_text_glyphs (surface:ptr<?>) -> int :
    val ret = call-c cairo_surface_has_show_text_glyphs(surface)
    return ret
  public lostanza defn w_cairo_image_surface_create (format:int, width:int, height:int) -> ptr<?> :
    val ret = call-c cairo_image_surface_create(format, width, height)
    return ret
  public lostanza defn w_cairo_format_stride_for_width (format:int, width:int) -> int :
    val ret = call-c cairo_format_stride_for_width(format, width)
    return ret
  public lostanza defn w_cairo_image_surface_create_for_data (data:ptr<byte>, format:int, width:int, height:int, stride:int) -> ptr<?> :
    val ret = call-c cairo_image_surface_create_for_data(data, format, width, height, stride)
    return ret
  public lostanza defn w_cairo_image_surface_get_data (surface:ptr<?>) -> ptr<byte> :
    val ret = call-c cairo_image_surface_get_data(surface)
    return ret
  public lostanza defn w_cairo_image_surface_get_format (surface:ptr<?>) -> int :
    val ret = call-c cairo_image_surface_get_format(surface)
    return ret
  public lostanza defn w_cairo_image_surface_get_width (surface:ptr<?>) -> int :
    val ret = call-c cairo_image_surface_get_width(surface)
    return ret
  public lostanza defn w_cairo_image_surface_get_height (surface:ptr<?>) -> int :
    val ret = call-c cairo_image_surface_get_height(surface)
    return ret
  public lostanza defn w_cairo_image_surface_get_stride (surface:ptr<?>) -> int :
    val ret = call-c cairo_image_surface_get_stride(surface)
    return ret
  public lostanza defn w_cairo_image_surface_create_from_png (filename:ptr<byte>) -> ptr<?> :
    val ret = call-c cairo_image_surface_create_from_png(filename)
    return ret
  public lostanza defn w_cairo_image_surface_create_from_png_stream (read_func:ptr<( (ptr<?>,ptr<byte>,int) -> int )>, closure:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_image_surface_create_from_png_stream(read_func, closure)
    return ret
  public lostanza defn w_cairo_recording_surface_create (content:int, extents:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_recording_surface_create(content, extents)
    return ret
  public lostanza defn w_cairo_recording_surface_ink_extents (surface:ptr<?>, x0:ptr<double>, y0:ptr<double>, width:ptr<double>, height:ptr<double>) -> ref<False> :
    call-c cairo_recording_surface_ink_extents(surface, x0, y0, width, height)
    return false
  public lostanza defn w_cairo_recording_surface_get_extents (surface:ptr<?>, extents:ptr<?>) -> int :
    val ret = call-c cairo_recording_surface_get_extents(surface, extents)
    return ret
  public lostanza defn w_cairo_pattern_create_raster_source (user_data:ptr<?>, content:int, width:int, height:int) -> ptr<?> :
    val ret = call-c cairo_pattern_create_raster_source(user_data, content, width, height)
    return ret
  public lostanza defn w_cairo_raster_source_pattern_set_callback_data (pattern:ptr<?>, data:ptr<?>) -> ref<False> :
    call-c cairo_raster_source_pattern_set_callback_data(pattern, data)
    return false
  public lostanza defn w_cairo_raster_source_pattern_get_callback_data (pattern:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_raster_source_pattern_get_callback_data(pattern)
    return ret
  public lostanza defn w_cairo_raster_source_pattern_set_acquire (pattern:ptr<?>, acquire:ptr<( (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?> )>, release:ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>) -> ref<False> :
    call-c cairo_raster_source_pattern_set_acquire(pattern, acquire, release)
    return false
  public lostanza defn w_cairo_raster_source_pattern_get_acquire (pattern:ptr<?>, acquire:ptr<ptr<( (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?> )>>, release:ptr<ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>>) -> ref<False> :
    call-c cairo_raster_source_pattern_get_acquire(pattern, acquire, release)
    return false
  public lostanza defn w_cairo_raster_source_pattern_set_snapshot (pattern:ptr<?>, snapshot:ptr<( (ptr<?>,ptr<?>) -> int )>) -> ref<False> :
    call-c cairo_raster_source_pattern_set_snapshot(pattern, snapshot)
    return false
  public lostanza defn w_cairo_raster_source_pattern_get_snapshot (pattern:ptr<?>) -> ptr<( (ptr<?>,ptr<?>) -> int )> :
    val ret = call-c cairo_raster_source_pattern_get_snapshot(pattern)
    return ret
  public lostanza defn w_cairo_raster_source_pattern_set_copy (pattern:ptr<?>, copy:ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>) -> ref<False> :
    call-c cairo_raster_source_pattern_set_copy(pattern, copy)
    return false
  public lostanza defn w_cairo_raster_source_pattern_get_copy (pattern:ptr<?>) -> ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )> :
    val ret = call-c cairo_raster_source_pattern_get_copy(pattern)
    return ret
  public lostanza defn w_cairo_raster_source_pattern_set_finish (pattern:ptr<?>, finish:ptr<( (ptr<?>,ptr<?>) -> int )>) -> ref<False> :
    call-c cairo_raster_source_pattern_set_finish(pattern, finish)
    return false
  public lostanza defn w_cairo_raster_source_pattern_get_finish (pattern:ptr<?>) -> ptr<( (ptr<?>,ptr<?>) -> int )> :
    val ret = call-c cairo_raster_source_pattern_get_finish(pattern)
    return ret
  public lostanza defn w_cairo_pattern_create_rgb (red:double, green:double, blue:double) -> ptr<?> :
    val ret = call-c cairo_pattern_create_rgb(red, green, blue)
    return ret
  public lostanza defn w_cairo_pattern_create_rgba (red:double, green:double, blue:double, alpha:double) -> ptr<?> :
    val ret = call-c cairo_pattern_create_rgba(red, green, blue, alpha)
    return ret
  public lostanza defn w_cairo_pattern_create_for_surface (surface:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_pattern_create_for_surface(surface)
    return ret
  public lostanza defn w_cairo_pattern_create_linear (x0:double, y0:double, x1:double, y1:double) -> ptr<?> :
    val ret = call-c cairo_pattern_create_linear(x0, y0, x1, y1)
    return ret
  public lostanza defn w_cairo_pattern_create_radial (cx0:double, cy0:double, radius0:double, cx1:double, cy1:double, radius1:double) -> ptr<?> :
    val ret = call-c cairo_pattern_create_radial(cx0, cy0, radius0, cx1, cy1, radius1)
    return ret
  public lostanza defn w_cairo_pattern_create_mesh () -> ptr<?> :
    val ret = call-c cairo_pattern_create_mesh()
    return ret
  public lostanza defn w_cairo_pattern_reference (pattern:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_pattern_reference(pattern)
    return ret
  public lostanza defn w_cairo_pattern_destroy (pattern:ptr<?>) -> ref<False> :
    call-c cairo_pattern_destroy(pattern)
    return false
  public lostanza defn w_cairo_pattern_get_reference_count (pattern:ptr<?>) -> int :
    val ret = call-c cairo_pattern_get_reference_count(pattern)
    return ret
  public lostanza defn w_cairo_pattern_status (pattern:ptr<?>) -> int :
    val ret = call-c cairo_pattern_status(pattern)
    return ret
  public lostanza defn w_cairo_pattern_get_user_data (pattern:ptr<?>, key:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_pattern_get_user_data(pattern, key)
    return ret
  public lostanza defn w_cairo_pattern_set_user_data (pattern:ptr<?>, key:ptr<?>, user_data:ptr<?>, destroy:ptr<( (ptr<?>) -> int )>) -> int :
    val ret = call-c cairo_pattern_set_user_data(pattern, key, user_data, destroy)
    return ret
  public lostanza defn w_cairo_pattern_get_type (pattern:ptr<?>) -> int :
    val ret = call-c cairo_pattern_get_type(pattern)
    return ret
  public lostanza defn w_cairo_pattern_add_color_stop_rgb (pattern:ptr<?>, offset:double, red:double, green:double, blue:double) -> ref<False> :
    call-c cairo_pattern_add_color_stop_rgb(pattern, offset, red, green, blue)
    return false
  public lostanza defn w_cairo_pattern_add_color_stop_rgba (pattern:ptr<?>, offset:double, red:double, green:double, blue:double, alpha:double) -> ref<False> :
    call-c cairo_pattern_add_color_stop_rgba(pattern, offset, red, green, blue, alpha)
    return false
  public lostanza defn w_cairo_mesh_pattern_begin_patch (pattern:ptr<?>) -> ref<False> :
    call-c cairo_mesh_pattern_begin_patch(pattern)
    return false
  public lostanza defn w_cairo_mesh_pattern_end_patch (pattern:ptr<?>) -> ref<False> :
    call-c cairo_mesh_pattern_end_patch(pattern)
    return false
  public lostanza defn w_cairo_mesh_pattern_curve_to (pattern:ptr<?>, x1:double, y1:double, x2:double, y2:double, x3:double, y3:double) -> ref<False> :
    call-c cairo_mesh_pattern_curve_to(pattern, x1, y1, x2, y2, x3, y3)
    return false
  public lostanza defn w_cairo_mesh_pattern_line_to (pattern:ptr<?>, x:double, y:double) -> ref<False> :
    call-c cairo_mesh_pattern_line_to(pattern, x, y)
    return false
  public lostanza defn w_cairo_mesh_pattern_move_to (pattern:ptr<?>, x:double, y:double) -> ref<False> :
    call-c cairo_mesh_pattern_move_to(pattern, x, y)
    return false
  public lostanza defn w_cairo_mesh_pattern_set_control_point (pattern:ptr<?>, point_num:int, x:double, y:double) -> ref<False> :
    call-c cairo_mesh_pattern_set_control_point(pattern, point_num, x, y)
    return false
  public lostanza defn w_cairo_mesh_pattern_set_corner_color_rgb (pattern:ptr<?>, corner_num:int, red:double, green:double, blue:double) -> ref<False> :
    call-c cairo_mesh_pattern_set_corner_color_rgb(pattern, corner_num, red, green, blue)
    return false
  public lostanza defn w_cairo_mesh_pattern_set_corner_color_rgba (pattern:ptr<?>, corner_num:int, red:double, green:double, blue:double, alpha:double) -> ref<False> :
    call-c cairo_mesh_pattern_set_corner_color_rgba(pattern, corner_num, red, green, blue, alpha)
    return false
  public lostanza defn w_cairo_pattern_set_matrix (pattern:ptr<?>, matrix:ptr<?>) -> ref<False> :
    call-c cairo_pattern_set_matrix(pattern, matrix)
    return false
  public lostanza defn w_cairo_pattern_get_matrix (pattern:ptr<?>, matrix:ptr<?>) -> ref<False> :
    call-c cairo_pattern_get_matrix(pattern, matrix)
    return false
  public lostanza defn w_cairo_pattern_set_extend (pattern:ptr<?>, extend:int) -> ref<False> :
    call-c cairo_pattern_set_extend(pattern, extend)
    return false
  public lostanza defn w_cairo_pattern_get_extend (pattern:ptr<?>) -> int :
    val ret = call-c cairo_pattern_get_extend(pattern)
    return ret
  public lostanza defn w_cairo_pattern_set_filter (pattern:ptr<?>, filter:int) -> ref<False> :
    call-c cairo_pattern_set_filter(pattern, filter)
    return false
  public lostanza defn w_cairo_pattern_get_filter (pattern:ptr<?>) -> int :
    val ret = call-c cairo_pattern_get_filter(pattern)
    return ret
  public lostanza defn w_cairo_pattern_get_rgba (pattern:ptr<?>, red:ptr<double>, green:ptr<double>, blue:ptr<double>, alpha:ptr<double>) -> int :
    val ret = call-c cairo_pattern_get_rgba(pattern, red, green, blue, alpha)
    return ret
  public lostanza defn w_cairo_pattern_get_surface (pattern:ptr<?>, surface:ptr<ptr<?>>) -> int :
    val ret = call-c cairo_pattern_get_surface(pattern, surface)
    return ret
  public lostanza defn w_cairo_pattern_get_color_stop_rgba (pattern:ptr<?>, index:int, offset:ptr<double>, red:ptr<double>, green:ptr<double>, blue:ptr<double>, alpha:ptr<double>) -> int :
    val ret = call-c cairo_pattern_get_color_stop_rgba(pattern, index, offset, red, green, blue, alpha)
    return ret
  public lostanza defn w_cairo_pattern_get_color_stop_count (pattern:ptr<?>, count:ptr<int>) -> int :
    val ret = call-c cairo_pattern_get_color_stop_count(pattern, count)
    return ret
  public lostanza defn w_cairo_pattern_get_linear_points (pattern:ptr<?>, x0:ptr<double>, y0:ptr<double>, x1:ptr<double>, y1:ptr<double>) -> int :
    val ret = call-c cairo_pattern_get_linear_points(pattern, x0, y0, x1, y1)
    return ret
  public lostanza defn w_cairo_pattern_get_radial_circles (pattern:ptr<?>, x0:ptr<double>, y0:ptr<double>, r0:ptr<double>, x1:ptr<double>, y1:ptr<double>, r1:ptr<double>) -> int :
    val ret = call-c cairo_pattern_get_radial_circles(pattern, x0, y0, r0, x1, y1, r1)
    return ret
  public lostanza defn w_cairo_mesh_pattern_get_patch_count (pattern:ptr<?>, count:ptr<int>) -> int :
    val ret = call-c cairo_mesh_pattern_get_patch_count(pattern, count)
    return ret
  public lostanza defn w_cairo_mesh_pattern_get_path (pattern:ptr<?>, patch_num:int) -> ptr<?> :
    val ret = call-c cairo_mesh_pattern_get_path(pattern, patch_num)
    return ret
  public lostanza defn w_cairo_mesh_pattern_get_corner_color_rgba (pattern:ptr<?>, patch_num:int, corner_num:int, red:ptr<double>, green:ptr<double>, blue:ptr<double>, alpha:ptr<double>) -> int :
    val ret = call-c cairo_mesh_pattern_get_corner_color_rgba(pattern, patch_num, corner_num, red, green, blue, alpha)
    return ret
  public lostanza defn w_cairo_mesh_pattern_get_control_point (pattern:ptr<?>, patch_num:int, point_num:int, x:ptr<double>, y:ptr<double>) -> int :
    val ret = call-c cairo_mesh_pattern_get_control_point(pattern, patch_num, point_num, x, y)
    return ret
  public lostanza defn w_cairo_matrix_init (matrix:ptr<?>, xx:double, yx:double, xy:double, yy:double, x0:double, y0:double) -> ref<False> :
    call-c cairo_matrix_init(matrix, xx, yx, xy, yy, x0, y0)
    return false
  public lostanza defn w_cairo_matrix_init_identity (matrix:ptr<?>) -> ref<False> :
    call-c cairo_matrix_init_identity(matrix)
    return false
  public lostanza defn w_cairo_matrix_init_translate (matrix:ptr<?>, tx:double, ty:double) -> ref<False> :
    call-c cairo_matrix_init_translate(matrix, tx, ty)
    return false
  public lostanza defn w_cairo_matrix_init_scale (matrix:ptr<?>, sx:double, sy:double) -> ref<False> :
    call-c cairo_matrix_init_scale(matrix, sx, sy)
    return false
  public lostanza defn w_cairo_matrix_init_rotate (matrix:ptr<?>, radians:double) -> ref<False> :
    call-c cairo_matrix_init_rotate(matrix, radians)
    return false
  public lostanza defn w_cairo_matrix_translate (matrix:ptr<?>, tx:double, ty:double) -> ref<False> :
    call-c cairo_matrix_translate(matrix, tx, ty)
    return false
  public lostanza defn w_cairo_matrix_scale (matrix:ptr<?>, sx:double, sy:double) -> ref<False> :
    call-c cairo_matrix_scale(matrix, sx, sy)
    return false
  public lostanza defn w_cairo_matrix_rotate (matrix:ptr<?>, radians:double) -> ref<False> :
    call-c cairo_matrix_rotate(matrix, radians)
    return false
  public lostanza defn w_cairo_matrix_invert (matrix:ptr<?>) -> int :
    val ret = call-c cairo_matrix_invert(matrix)
    return ret
  public lostanza defn w_cairo_matrix_multiply (result:ptr<?>, a:ptr<?>, b:ptr<?>) -> ref<False> :
    call-c cairo_matrix_multiply(result, a, b)
    return false
  public lostanza defn w_cairo_matrix_transform_distance (matrix:ptr<?>, dx:ptr<double>, dy:ptr<double>) -> ref<False> :
    call-c cairo_matrix_transform_distance(matrix, dx, dy)
    return false
  public lostanza defn w_cairo_matrix_transform_point (matrix:ptr<?>, x:ptr<double>, y:ptr<double>) -> ref<False> :
    call-c cairo_matrix_transform_point(matrix, x, y)
    return false
  public lostanza defn w_cairo_region_create () -> ptr<?> :
    val ret = call-c cairo_region_create()
    return ret
  public lostanza defn w_cairo_region_create_rectangle (rectangle:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_region_create_rectangle(rectangle)
    return ret
  public lostanza defn w_cairo_region_create_rectangles (rects:ptr<?>, count:int) -> ptr<?> :
    val ret = call-c cairo_region_create_rectangles(rects, count)
    return ret
  public lostanza defn w_cairo_region_copy (original:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_region_copy(original)
    return ret
  public lostanza defn w_cairo_region_reference (region:ptr<?>) -> ptr<?> :
    val ret = call-c cairo_region_reference(region)
    return ret
  public lostanza defn w_cairo_region_destroy (region:ptr<?>) -> ref<False> :
    call-c cairo_region_destroy(region)
    return false
  public lostanza defn w_cairo_region_equal (a:ptr<?>, b:ptr<?>) -> int :
    val ret = call-c cairo_region_equal(a, b)
    return ret
  public lostanza defn w_cairo_region_status (region:ptr<?>) -> int :
    val ret = call-c cairo_region_status(region)
    return ret
  public lostanza defn w_cairo_region_get_extents (region:ptr<?>, extents:ptr<?>) -> ref<False> :
    call-c cairo_region_get_extents(region, extents)
    return false
  public lostanza defn w_cairo_region_num_rectangles (region:ptr<?>) -> int :
    val ret = call-c cairo_region_num_rectangles(region)
    return ret
  public lostanza defn w_cairo_region_get_rectangle (region:ptr<?>, nth:int, rectangle:ptr<?>) -> ref<False> :
    call-c cairo_region_get_rectangle(region, nth, rectangle)
    return false
  public lostanza defn w_cairo_region_is_empty (region:ptr<?>) -> int :
    val ret = call-c cairo_region_is_empty(region)
    return ret
  public lostanza defn w_cairo_region_contains_rectangle (region:ptr<?>, rectangle:ptr<?>) -> int :
    val ret = call-c cairo_region_contains_rectangle(region, rectangle)
    return ret
  public lostanza defn w_cairo_region_contains_point (region:ptr<?>, x:int, y:int) -> int :
    val ret = call-c cairo_region_contains_point(region, x, y)
    return ret
  public lostanza defn w_cairo_region_translate (region:ptr<?>, dx:int, dy:int) -> ref<False> :
    call-c cairo_region_translate(region, dx, dy)
    return false
  public lostanza defn w_cairo_region_subtract (dst:ptr<?>, other:ptr<?>) -> int :
    val ret = call-c cairo_region_subtract(dst, other)
    return ret
  public lostanza defn w_cairo_region_subtract_rectangle (dst:ptr<?>, rectangle:ptr<?>) -> int :
    val ret = call-c cairo_region_subtract_rectangle(dst, rectangle)
    return ret
  public lostanza defn w_cairo_region_intersect (dst:ptr<?>, other:ptr<?>) -> int :
    val ret = call-c cairo_region_intersect(dst, other)
    return ret
  public lostanza defn w_cairo_region_intersect_rectangle (dst:ptr<?>, rectangle:ptr<?>) -> int :
    val ret = call-c cairo_region_intersect_rectangle(dst, rectangle)
    return ret
  public lostanza defn w_cairo_region_union (dst:ptr<?>, other:ptr<?>) -> int :
    val ret = call-c cairo_region_union(dst, other)
    return ret
  public lostanza defn w_cairo_region_union_rectangle (dst:ptr<?>, rectangle:ptr<?>) -> int :
    val ret = call-c cairo_region_union_rectangle(dst, rectangle)
    return ret
  public lostanza defn w_cairo_region_xor (dst:ptr<?>, other:ptr<?>) -> int :
    val ret = call-c cairo_region_xor(dst, other)
    return ret
  public lostanza defn w_cairo_region_xor_rectangle (dst:ptr<?>, rectangle:ptr<?>) -> int :
    val ret = call-c cairo_region_xor_rectangle(dst, rectangle)
    return ret
  public lostanza defn w_cairo_debug_reset_static_data () -> ref<False> :
    call-c cairo_debug_reset_static_data()
    return false
#else:
  val DEF_LIB_PATH = "./libcairo.dll"
  val ENV_LIB_PATH_NAME = "CAIRO_SHARED_LIB"
  defn get-shared-lib () -> String :
    label<String> return:
      var sharedLib = get-env(ENV_LIB_PATH_NAME)
      match(sharedLib) :
        (fpath:String) :
          return(fpath)
        (x:False):
          return(DEF_LIB_PATH)
  
  val shlibPath = get-shared-lib()
  val shlib = dynamic-library-open(shlibPath)
  
  lostanza val p_cairo_version: ptr<(() -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_version")).address
  
  lostanza val p_cairo_version_string: ptr<(() -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("cairo_version_string")).address
  
  lostanza val p_cairo_create: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_create")).address
  
  lostanza val p_cairo_reference: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_reference")).address
  
  lostanza val p_cairo_destroy: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_destroy")).address
  
  lostanza val p_cairo_get_reference_count: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_get_reference_count")).address
  
  lostanza val p_cairo_get_user_data: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_get_user_data")).address
  
  lostanza val p_cairo_set_user_data: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<( (ptr<?>) -> int )>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_set_user_data")).address
  
  lostanza val p_cairo_save: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_save")).address
  
  lostanza val p_cairo_restore: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_restore")).address
  
  lostanza val p_cairo_push_group: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_push_group")).address
  
  lostanza val p_cairo_push_group_with_content: ptr<((ptr<?>,int) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_push_group_with_content")).address
  
  lostanza val p_cairo_pop_group: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_pop_group")).address
  
  lostanza val p_cairo_pop_group_to_source: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_pop_group_to_source")).address
  
  lostanza val p_cairo_set_operator: ptr<((ptr<?>,int) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_set_operator")).address
  
  lostanza val p_cairo_set_source: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_set_source")).address
  
  lostanza val p_cairo_set_source_rgb: ptr<((ptr<?>,double,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_set_source_rgb")).address
  
  lostanza val p_cairo_set_source_rgba: ptr<((ptr<?>,double,double,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_set_source_rgba")).address
  
  lostanza val p_cairo_set_source_surface: ptr<((ptr<?>,ptr<?>,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_set_source_surface")).address
  
  lostanza val p_cairo_set_tolerance: ptr<((ptr<?>,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_set_tolerance")).address
  
  lostanza val p_cairo_set_antialias: ptr<((ptr<?>,int) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_set_antialias")).address
  
  lostanza val p_cairo_set_fill_rule: ptr<((ptr<?>,int) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_set_fill_rule")).address
  
  lostanza val p_cairo_set_line_width: ptr<((ptr<?>,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_set_line_width")).address
  
  lostanza val p_cairo_set_line_cap: ptr<((ptr<?>,int) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_set_line_cap")).address
  
  lostanza val p_cairo_set_line_join: ptr<((ptr<?>,int) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_set_line_join")).address
  
  lostanza val p_cairo_set_dash: ptr<((ptr<?>,ptr<double>,int,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_set_dash")).address
  
  lostanza val p_cairo_set_miter_limit: ptr<((ptr<?>,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_set_miter_limit")).address
  
  lostanza val p_cairo_translate: ptr<((ptr<?>,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_translate")).address
  
  lostanza val p_cairo_scale: ptr<((ptr<?>,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_scale")).address
  
  lostanza val p_cairo_rotate: ptr<((ptr<?>,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_rotate")).address
  
  lostanza val p_cairo_transform: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_transform")).address
  
  lostanza val p_cairo_set_matrix: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_set_matrix")).address
  
  lostanza val p_cairo_identity_matrix: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_identity_matrix")).address
  
  lostanza val p_cairo_user_to_device: ptr<((ptr<?>,ptr<double>,ptr<double>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_user_to_device")).address
  
  lostanza val p_cairo_user_to_device_distance: ptr<((ptr<?>,ptr<double>,ptr<double>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_user_to_device_distance")).address
  
  lostanza val p_cairo_device_to_user: ptr<((ptr<?>,ptr<double>,ptr<double>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_device_to_user")).address
  
  lostanza val p_cairo_device_to_user_distance: ptr<((ptr<?>,ptr<double>,ptr<double>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_device_to_user_distance")).address
  
  lostanza val p_cairo_new_path: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_new_path")).address
  
  lostanza val p_cairo_move_to: ptr<((ptr<?>,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_move_to")).address
  
  lostanza val p_cairo_new_sub_path: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_new_sub_path")).address
  
  lostanza val p_cairo_line_to: ptr<((ptr<?>,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_line_to")).address
  
  lostanza val p_cairo_curve_to: ptr<((ptr<?>,double,double,double,double,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_curve_to")).address
  
  lostanza val p_cairo_arc: ptr<((ptr<?>,double,double,double,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_arc")).address
  
  lostanza val p_cairo_arc_negative: ptr<((ptr<?>,double,double,double,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_arc_negative")).address
  
  lostanza val p_cairo_rel_move_to: ptr<((ptr<?>,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_rel_move_to")).address
  
  lostanza val p_cairo_rel_line_to: ptr<((ptr<?>,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_rel_line_to")).address
  
  lostanza val p_cairo_rel_curve_to: ptr<((ptr<?>,double,double,double,double,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_rel_curve_to")).address
  
  lostanza val p_cairo_rectangle: ptr<((ptr<?>,double,double,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_rectangle")).address
  
  lostanza val p_cairo_close_path: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_close_path")).address
  
  lostanza val p_cairo_path_extents: ptr<((ptr<?>,ptr<double>,ptr<double>,ptr<double>,ptr<double>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_path_extents")).address
  
  lostanza val p_cairo_paint: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_paint")).address
  
  lostanza val p_cairo_paint_with_alpha: ptr<((ptr<?>,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_paint_with_alpha")).address
  
  lostanza val p_cairo_mask: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_mask")).address
  
  lostanza val p_cairo_mask_surface: ptr<((ptr<?>,ptr<?>,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_mask_surface")).address
  
  lostanza val p_cairo_stroke: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_stroke")).address
  
  lostanza val p_cairo_stroke_preserve: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_stroke_preserve")).address
  
  lostanza val p_cairo_fill: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_fill")).address
  
  lostanza val p_cairo_fill_preserve: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_fill_preserve")).address
  
  lostanza val p_cairo_copy_page: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_copy_page")).address
  
  lostanza val p_cairo_show_page: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_show_page")).address
  
  lostanza val p_cairo_in_stroke: ptr<((ptr<?>,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_in_stroke")).address
  
  lostanza val p_cairo_in_fill: ptr<((ptr<?>,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_in_fill")).address
  
  lostanza val p_cairo_in_clip: ptr<((ptr<?>,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_in_clip")).address
  
  lostanza val p_cairo_stroke_extents: ptr<((ptr<?>,ptr<double>,ptr<double>,ptr<double>,ptr<double>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_stroke_extents")).address
  
  lostanza val p_cairo_fill_extents: ptr<((ptr<?>,ptr<double>,ptr<double>,ptr<double>,ptr<double>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_fill_extents")).address
  
  lostanza val p_cairo_reset_clip: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_reset_clip")).address
  
  lostanza val p_cairo_clip: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_clip")).address
  
  lostanza val p_cairo_clip_preserve: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_clip_preserve")).address
  
  lostanza val p_cairo_clip_extents: ptr<((ptr<?>,ptr<double>,ptr<double>,ptr<double>,ptr<double>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_clip_extents")).address
  
  lostanza val p_cairo_copy_clip_rectangle_list: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_copy_clip_rectangle_list")).address
  
  lostanza val p_cairo_rectangle_list_destroy: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_rectangle_list_destroy")).address
  
  lostanza val p_cairo_glyph_allocate: ptr<((int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_glyph_allocate")).address
  
  lostanza val p_cairo_glyph_free: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_glyph_free")).address
  
  lostanza val p_cairo_text_cluster_allocate: ptr<((int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_text_cluster_allocate")).address
  
  lostanza val p_cairo_text_cluster_free: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_text_cluster_free")).address
  
  lostanza val p_cairo_font_options_create: ptr<(() -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_font_options_create")).address
  
  lostanza val p_cairo_font_options_copy: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_font_options_copy")).address
  
  lostanza val p_cairo_font_options_destroy: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_font_options_destroy")).address
  
  lostanza val p_cairo_font_options_status: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_font_options_status")).address
  
  lostanza val p_cairo_font_options_merge: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_font_options_merge")).address
  
  lostanza val p_cairo_font_options_equal: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_font_options_equal")).address
  
  lostanza val p_cairo_font_options_hash: ptr<((ptr<?>) -> long)> = 
    dynamic-library-symbol(shlib, String("cairo_font_options_hash")).address
  
  lostanza val p_cairo_font_options_set_antialias: ptr<((ptr<?>,int) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_font_options_set_antialias")).address
  
  lostanza val p_cairo_font_options_get_antialias: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_font_options_get_antialias")).address
  
  lostanza val p_cairo_font_options_set_subpixel_order: ptr<((ptr<?>,int) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_font_options_set_subpixel_order")).address
  
  lostanza val p_cairo_font_options_get_subpixel_order: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_font_options_get_subpixel_order")).address
  
  lostanza val p_cairo_font_options_set_hint_style: ptr<((ptr<?>,int) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_font_options_set_hint_style")).address
  
  lostanza val p_cairo_font_options_get_hint_style: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_font_options_get_hint_style")).address
  
  lostanza val p_cairo_font_options_set_hint_metrics: ptr<((ptr<?>,int) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_font_options_set_hint_metrics")).address
  
  lostanza val p_cairo_font_options_get_hint_metrics: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_font_options_get_hint_metrics")).address
  
  lostanza val p_cairo_select_font_face: ptr<((ptr<?>,ptr<byte>,int,int) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_select_font_face")).address
  
  lostanza val p_cairo_set_font_size: ptr<((ptr<?>,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_set_font_size")).address
  
  lostanza val p_cairo_set_font_matrix: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_set_font_matrix")).address
  
  lostanza val p_cairo_get_font_matrix: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_get_font_matrix")).address
  
  lostanza val p_cairo_set_font_options: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_set_font_options")).address
  
  lostanza val p_cairo_get_font_options: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_get_font_options")).address
  
  lostanza val p_cairo_set_font_face: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_set_font_face")).address
  
  lostanza val p_cairo_get_font_face: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_get_font_face")).address
  
  lostanza val p_cairo_set_scaled_font: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_set_scaled_font")).address
  
  lostanza val p_cairo_get_scaled_font: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_get_scaled_font")).address
  
  lostanza val p_cairo_show_text: ptr<((ptr<?>,ptr<byte>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_show_text")).address
  
  lostanza val p_cairo_show_glyphs: ptr<((ptr<?>,ptr<?>,int) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_show_glyphs")).address
  
  lostanza val p_cairo_show_text_glyphs: ptr<((ptr<?>,ptr<byte>,int,ptr<?>,int,ptr<?>,int,int) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_show_text_glyphs")).address
  
  lostanza val p_cairo_text_path: ptr<((ptr<?>,ptr<byte>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_text_path")).address
  
  lostanza val p_cairo_glyph_path: ptr<((ptr<?>,ptr<?>,int) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_glyph_path")).address
  
  lostanza val p_cairo_text_extents: ptr<((ptr<?>,ptr<byte>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_text_extents")).address
  
  lostanza val p_cairo_glyph_extents: ptr<((ptr<?>,ptr<?>,int,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_glyph_extents")).address
  
  lostanza val p_cairo_font_extents: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_font_extents")).address
  
  lostanza val p_cairo_font_face_reference: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_font_face_reference")).address
  
  lostanza val p_cairo_font_face_destroy: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_font_face_destroy")).address
  
  lostanza val p_cairo_font_face_get_reference_count: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_font_face_get_reference_count")).address
  
  lostanza val p_cairo_font_face_status: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_font_face_status")).address
  
  lostanza val p_cairo_font_face_get_type: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_font_face_get_type")).address
  
  lostanza val p_cairo_font_face_get_user_data: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_font_face_get_user_data")).address
  
  lostanza val p_cairo_font_face_set_user_data: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<( (ptr<?>) -> int )>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_font_face_set_user_data")).address
  
  lostanza val p_cairo_scaled_font_create: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_scaled_font_create")).address
  
  lostanza val p_cairo_scaled_font_reference: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_scaled_font_reference")).address
  
  lostanza val p_cairo_scaled_font_destroy: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_scaled_font_destroy")).address
  
  lostanza val p_cairo_scaled_font_get_reference_count: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_scaled_font_get_reference_count")).address
  
  lostanza val p_cairo_scaled_font_status: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_scaled_font_status")).address
  
  lostanza val p_cairo_scaled_font_get_type: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_scaled_font_get_type")).address
  
  lostanza val p_cairo_scaled_font_get_user_data: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_scaled_font_get_user_data")).address
  
  lostanza val p_cairo_scaled_font_set_user_data: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<( (ptr<?>) -> int )>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_scaled_font_set_user_data")).address
  
  lostanza val p_cairo_scaled_font_extents: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_scaled_font_extents")).address
  
  lostanza val p_cairo_scaled_font_text_extents: ptr<((ptr<?>,ptr<byte>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_scaled_font_text_extents")).address
  
  lostanza val p_cairo_scaled_font_glyph_extents: ptr<((ptr<?>,ptr<?>,int,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_scaled_font_glyph_extents")).address
  
  lostanza val p_cairo_scaled_font_text_to_glyphs: ptr<((ptr<?>,double,double,ptr<byte>,int,ptr<ptr<?>>,ptr<int>,ptr<ptr<?>>,ptr<int>,ptr<int>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_scaled_font_text_to_glyphs")).address
  
  lostanza val p_cairo_scaled_font_get_font_face: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_scaled_font_get_font_face")).address
  
  lostanza val p_cairo_scaled_font_get_font_matrix: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_scaled_font_get_font_matrix")).address
  
  lostanza val p_cairo_scaled_font_get_ctm: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_scaled_font_get_ctm")).address
  
  lostanza val p_cairo_scaled_font_get_scale_matrix: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_scaled_font_get_scale_matrix")).address
  
  lostanza val p_cairo_scaled_font_get_font_options: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_scaled_font_get_font_options")).address
  
  lostanza val p_cairo_toy_font_face_create: ptr<((ptr<byte>,int,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_toy_font_face_create")).address
  
  lostanza val p_cairo_toy_font_face_get_family: ptr<((ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("cairo_toy_font_face_get_family")).address
  
  lostanza val p_cairo_toy_font_face_get_slant: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_toy_font_face_get_slant")).address
  
  lostanza val p_cairo_toy_font_face_get_weight: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_toy_font_face_get_weight")).address
  
  lostanza val p_cairo_user_font_face_create: ptr<(() -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_user_font_face_create")).address
  
  lostanza val p_cairo_user_font_face_set_init_func: ptr<((ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_user_font_face_set_init_func")).address
  
  lostanza val p_cairo_user_font_face_set_render_glyph_func: ptr<((ptr<?>,ptr<( (ptr<?>,long,ptr<?>,ptr<?>) -> int )>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_user_font_face_set_render_glyph_func")).address
  
  lostanza val p_cairo_user_font_face_set_text_to_glyphs_func: ptr<((ptr<?>,ptr<( (ptr<?>,ptr<byte>,int,ptr<ptr<?>>,ptr<int>,ptr<ptr<?>>,ptr<int>,ptr<int>) -> int )>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_user_font_face_set_text_to_glyphs_func")).address
  
  lostanza val p_cairo_user_font_face_set_unicode_to_glyph_func: ptr<((ptr<?>,ptr<( (ptr<?>,long,ptr<long>) -> int )>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_user_font_face_set_unicode_to_glyph_func")).address
  
  lostanza val p_cairo_user_font_face_get_init_func: ptr<((ptr<?>) -> ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>)> = 
    dynamic-library-symbol(shlib, String("cairo_user_font_face_get_init_func")).address
  
  lostanza val p_cairo_user_font_face_get_render_glyph_func: ptr<((ptr<?>) -> ptr<( (ptr<?>,long,ptr<?>,ptr<?>) -> int )>)> = 
    dynamic-library-symbol(shlib, String("cairo_user_font_face_get_render_glyph_func")).address
  
  lostanza val p_cairo_user_font_face_get_text_to_glyphs_func: ptr<((ptr<?>) -> ptr<( (ptr<?>,ptr<byte>,int,ptr<ptr<?>>,ptr<int>,ptr<ptr<?>>,ptr<int>,ptr<int>) -> int )>)> = 
    dynamic-library-symbol(shlib, String("cairo_user_font_face_get_text_to_glyphs_func")).address
  
  lostanza val p_cairo_user_font_face_get_unicode_to_glyph_func: ptr<((ptr<?>) -> ptr<( (ptr<?>,long,ptr<long>) -> int )>)> = 
    dynamic-library-symbol(shlib, String("cairo_user_font_face_get_unicode_to_glyph_func")).address
  
  lostanza val p_cairo_get_operator: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_get_operator")).address
  
  lostanza val p_cairo_get_source: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_get_source")).address
  
  lostanza val p_cairo_get_tolerance: ptr<((ptr<?>) -> double)> = 
    dynamic-library-symbol(shlib, String("cairo_get_tolerance")).address
  
  lostanza val p_cairo_get_antialias: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_get_antialias")).address
  
  lostanza val p_cairo_has_current_point: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_has_current_point")).address
  
  lostanza val p_cairo_get_current_point: ptr<((ptr<?>,ptr<double>,ptr<double>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_get_current_point")).address
  
  lostanza val p_cairo_get_fill_rule: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_get_fill_rule")).address
  
  lostanza val p_cairo_get_line_width: ptr<((ptr<?>) -> double)> = 
    dynamic-library-symbol(shlib, String("cairo_get_line_width")).address
  
  lostanza val p_cairo_get_line_cap: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_get_line_cap")).address
  
  lostanza val p_cairo_get_line_join: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_get_line_join")).address
  
  lostanza val p_cairo_get_miter_limit: ptr<((ptr<?>) -> double)> = 
    dynamic-library-symbol(shlib, String("cairo_get_miter_limit")).address
  
  lostanza val p_cairo_get_dash_count: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_get_dash_count")).address
  
  lostanza val p_cairo_get_dash: ptr<((ptr<?>,ptr<double>,ptr<double>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_get_dash")).address
  
  lostanza val p_cairo_get_matrix: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_get_matrix")).address
  
  lostanza val p_cairo_get_target: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_get_target")).address
  
  lostanza val p_cairo_get_group_target: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_get_group_target")).address
  
  lostanza val p_cairo_copy_path: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_copy_path")).address
  
  lostanza val p_cairo_copy_path_flat: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_copy_path_flat")).address
  
  lostanza val p_cairo_append_path: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_append_path")).address
  
  lostanza val p_cairo_path_destroy: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_path_destroy")).address
  
  lostanza val p_cairo_status: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_status")).address
  
  lostanza val p_cairo_status_to_string: ptr<((int) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("cairo_status_to_string")).address
  
  lostanza val p_cairo_device_reference: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_device_reference")).address
  
  lostanza val p_cairo_device_get_type: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_device_get_type")).address
  
  lostanza val p_cairo_device_status: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_device_status")).address
  
  lostanza val p_cairo_device_acquire: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_device_acquire")).address
  
  lostanza val p_cairo_device_release: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_device_release")).address
  
  lostanza val p_cairo_device_flush: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_device_flush")).address
  
  lostanza val p_cairo_device_finish: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_device_finish")).address
  
  lostanza val p_cairo_device_destroy: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_device_destroy")).address
  
  lostanza val p_cairo_device_get_reference_count: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_device_get_reference_count")).address
  
  lostanza val p_cairo_device_get_user_data: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_device_get_user_data")).address
  
  lostanza val p_cairo_device_set_user_data: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<( (ptr<?>) -> int )>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_device_set_user_data")).address
  
  lostanza val p_cairo_surface_create_similar: ptr<((ptr<?>,int,int,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_create_similar")).address
  
  lostanza val p_cairo_surface_create_similar_image: ptr<((ptr<?>,int,int,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_create_similar_image")).address
  
  lostanza val p_cairo_surface_map_to_image: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_map_to_image")).address
  
  lostanza val p_cairo_surface_unmap_image: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_unmap_image")).address
  
  lostanza val p_cairo_surface_create_for_rectangle: ptr<((ptr<?>,double,double,double,double) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_create_for_rectangle")).address
  
  lostanza val p_cairo_surface_create_observer: ptr<((ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_create_observer")).address
  
  lostanza val p_cairo_surface_observer_add_paint_callback: ptr<((ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_observer_add_paint_callback")).address
  
  lostanza val p_cairo_surface_observer_add_mask_callback: ptr<((ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_observer_add_mask_callback")).address
  
  lostanza val p_cairo_surface_observer_add_fill_callback: ptr<((ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_observer_add_fill_callback")).address
  
  lostanza val p_cairo_surface_observer_add_stroke_callback: ptr<((ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_observer_add_stroke_callback")).address
  
  lostanza val p_cairo_surface_observer_add_glyphs_callback: ptr<((ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_observer_add_glyphs_callback")).address
  
  lostanza val p_cairo_surface_observer_add_flush_callback: ptr<((ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_observer_add_flush_callback")).address
  
  lostanza val p_cairo_surface_observer_add_finish_callback: ptr<((ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_observer_add_finish_callback")).address
  
  lostanza val p_cairo_surface_observer_print: ptr<((ptr<?>,ptr<( (ptr<?>,ptr<byte>,int) -> int )>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_observer_print")).address
  
  lostanza val p_cairo_surface_observer_elapsed: ptr<((ptr<?>) -> double)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_observer_elapsed")).address
  
  lostanza val p_cairo_device_observer_print: ptr<((ptr<?>,ptr<( (ptr<?>,ptr<byte>,int) -> int )>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_device_observer_print")).address
  
  lostanza val p_cairo_device_observer_elapsed: ptr<((ptr<?>) -> double)> = 
    dynamic-library-symbol(shlib, String("cairo_device_observer_elapsed")).address
  
  lostanza val p_cairo_device_observer_paint_elapsed: ptr<((ptr<?>) -> double)> = 
    dynamic-library-symbol(shlib, String("cairo_device_observer_paint_elapsed")).address
  
  lostanza val p_cairo_device_observer_mask_elapsed: ptr<((ptr<?>) -> double)> = 
    dynamic-library-symbol(shlib, String("cairo_device_observer_mask_elapsed")).address
  
  lostanza val p_cairo_device_observer_fill_elapsed: ptr<((ptr<?>) -> double)> = 
    dynamic-library-symbol(shlib, String("cairo_device_observer_fill_elapsed")).address
  
  lostanza val p_cairo_device_observer_stroke_elapsed: ptr<((ptr<?>) -> double)> = 
    dynamic-library-symbol(shlib, String("cairo_device_observer_stroke_elapsed")).address
  
  lostanza val p_cairo_device_observer_glyphs_elapsed: ptr<((ptr<?>) -> double)> = 
    dynamic-library-symbol(shlib, String("cairo_device_observer_glyphs_elapsed")).address
  
  lostanza val p_cairo_surface_reference: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_reference")).address
  
  lostanza val p_cairo_surface_finish: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_finish")).address
  
  lostanza val p_cairo_surface_destroy: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_destroy")).address
  
  lostanza val p_cairo_surface_get_device: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_get_device")).address
  
  lostanza val p_cairo_surface_get_reference_count: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_get_reference_count")).address
  
  lostanza val p_cairo_surface_status: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_status")).address
  
  lostanza val p_cairo_surface_get_type: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_get_type")).address
  
  lostanza val p_cairo_surface_get_content: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_get_content")).address
  
  lostanza val p_cairo_surface_write_to_png: ptr<((ptr<?>,ptr<byte>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_write_to_png")).address
  
  lostanza val p_cairo_surface_write_to_png_stream: ptr<((ptr<?>,ptr<( (ptr<?>,ptr<byte>,int) -> int )>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_write_to_png_stream")).address
  
  lostanza val p_cairo_surface_get_user_data: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_get_user_data")).address
  
  lostanza val p_cairo_surface_set_user_data: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<( (ptr<?>) -> int )>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_set_user_data")).address
  
  lostanza val p_cairo_surface_get_mime_data: ptr<((ptr<?>,ptr<byte>,ptr<ptr<byte>>,ptr<long>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_get_mime_data")).address
  
  lostanza val p_cairo_surface_set_mime_data: ptr<((ptr<?>,ptr<byte>,ptr<byte>,long,ptr<( (ptr<?>) -> int )>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_set_mime_data")).address
  
  lostanza val p_cairo_surface_supports_mime_type: ptr<((ptr<?>,ptr<byte>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_supports_mime_type")).address
  
  lostanza val p_cairo_surface_get_font_options: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_get_font_options")).address
  
  lostanza val p_cairo_surface_flush: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_flush")).address
  
  lostanza val p_cairo_surface_mark_dirty: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_mark_dirty")).address
  
  lostanza val p_cairo_surface_mark_dirty_rectangle: ptr<((ptr<?>,int,int,int,int) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_mark_dirty_rectangle")).address
  
  lostanza val p_cairo_surface_set_device_scale: ptr<((ptr<?>,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_set_device_scale")).address
  
  lostanza val p_cairo_surface_get_device_scale: ptr<((ptr<?>,ptr<double>,ptr<double>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_get_device_scale")).address
  
  lostanza val p_cairo_surface_set_device_offset: ptr<((ptr<?>,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_set_device_offset")).address
  
  lostanza val p_cairo_surface_get_device_offset: ptr<((ptr<?>,ptr<double>,ptr<double>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_get_device_offset")).address
  
  lostanza val p_cairo_surface_set_fallback_resolution: ptr<((ptr<?>,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_set_fallback_resolution")).address
  
  lostanza val p_cairo_surface_get_fallback_resolution: ptr<((ptr<?>,ptr<double>,ptr<double>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_get_fallback_resolution")).address
  
  lostanza val p_cairo_surface_copy_page: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_copy_page")).address
  
  lostanza val p_cairo_surface_show_page: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_show_page")).address
  
  lostanza val p_cairo_surface_has_show_text_glyphs: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_surface_has_show_text_glyphs")).address
  
  lostanza val p_cairo_image_surface_create: ptr<((int,int,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_image_surface_create")).address
  
  lostanza val p_cairo_format_stride_for_width: ptr<((int,int) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_format_stride_for_width")).address
  
  lostanza val p_cairo_image_surface_create_for_data: ptr<((ptr<byte>,int,int,int,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_image_surface_create_for_data")).address
  
  lostanza val p_cairo_image_surface_get_data: ptr<((ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("cairo_image_surface_get_data")).address
  
  lostanza val p_cairo_image_surface_get_format: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_image_surface_get_format")).address
  
  lostanza val p_cairo_image_surface_get_width: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_image_surface_get_width")).address
  
  lostanza val p_cairo_image_surface_get_height: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_image_surface_get_height")).address
  
  lostanza val p_cairo_image_surface_get_stride: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_image_surface_get_stride")).address
  
  lostanza val p_cairo_image_surface_create_from_png: ptr<((ptr<byte>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_image_surface_create_from_png")).address
  
  lostanza val p_cairo_image_surface_create_from_png_stream: ptr<((ptr<( (ptr<?>,ptr<byte>,int) -> int )>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_image_surface_create_from_png_stream")).address
  
  lostanza val p_cairo_recording_surface_create: ptr<((int,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_recording_surface_create")).address
  
  lostanza val p_cairo_recording_surface_ink_extents: ptr<((ptr<?>,ptr<double>,ptr<double>,ptr<double>,ptr<double>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_recording_surface_ink_extents")).address
  
  lostanza val p_cairo_recording_surface_get_extents: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_recording_surface_get_extents")).address
  
  lostanza val p_cairo_pattern_create_raster_source: ptr<((ptr<?>,int,int,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_create_raster_source")).address
  
  lostanza val p_cairo_raster_source_pattern_set_callback_data: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_raster_source_pattern_set_callback_data")).address
  
  lostanza val p_cairo_raster_source_pattern_get_callback_data: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_raster_source_pattern_get_callback_data")).address
  
  lostanza val p_cairo_raster_source_pattern_set_acquire: ptr<((ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?> )>,ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_raster_source_pattern_set_acquire")).address
  
  lostanza val p_cairo_raster_source_pattern_get_acquire: ptr<((ptr<?>,ptr<ptr<( (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?> )>>,ptr<ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_raster_source_pattern_get_acquire")).address
  
  lostanza val p_cairo_raster_source_pattern_set_snapshot: ptr<((ptr<?>,ptr<( (ptr<?>,ptr<?>) -> int )>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_raster_source_pattern_set_snapshot")).address
  
  lostanza val p_cairo_raster_source_pattern_get_snapshot: ptr<((ptr<?>) -> ptr<( (ptr<?>,ptr<?>) -> int )>)> = 
    dynamic-library-symbol(shlib, String("cairo_raster_source_pattern_get_snapshot")).address
  
  lostanza val p_cairo_raster_source_pattern_set_copy: ptr<((ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_raster_source_pattern_set_copy")).address
  
  lostanza val p_cairo_raster_source_pattern_get_copy: ptr<((ptr<?>) -> ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>)> = 
    dynamic-library-symbol(shlib, String("cairo_raster_source_pattern_get_copy")).address
  
  lostanza val p_cairo_raster_source_pattern_set_finish: ptr<((ptr<?>,ptr<( (ptr<?>,ptr<?>) -> int )>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_raster_source_pattern_set_finish")).address
  
  lostanza val p_cairo_raster_source_pattern_get_finish: ptr<((ptr<?>) -> ptr<( (ptr<?>,ptr<?>) -> int )>)> = 
    dynamic-library-symbol(shlib, String("cairo_raster_source_pattern_get_finish")).address
  
  lostanza val p_cairo_pattern_create_rgb: ptr<((double,double,double) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_create_rgb")).address
  
  lostanza val p_cairo_pattern_create_rgba: ptr<((double,double,double,double) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_create_rgba")).address
  
  lostanza val p_cairo_pattern_create_for_surface: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_create_for_surface")).address
  
  lostanza val p_cairo_pattern_create_linear: ptr<((double,double,double,double) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_create_linear")).address
  
  lostanza val p_cairo_pattern_create_radial: ptr<((double,double,double,double,double,double) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_create_radial")).address
  
  lostanza val p_cairo_pattern_create_mesh: ptr<(() -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_create_mesh")).address
  
  lostanza val p_cairo_pattern_reference: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_reference")).address
  
  lostanza val p_cairo_pattern_destroy: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_destroy")).address
  
  lostanza val p_cairo_pattern_get_reference_count: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_get_reference_count")).address
  
  lostanza val p_cairo_pattern_status: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_status")).address
  
  lostanza val p_cairo_pattern_get_user_data: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_get_user_data")).address
  
  lostanza val p_cairo_pattern_set_user_data: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<( (ptr<?>) -> int )>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_set_user_data")).address
  
  lostanza val p_cairo_pattern_get_type: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_get_type")).address
  
  lostanza val p_cairo_pattern_add_color_stop_rgb: ptr<((ptr<?>,double,double,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_add_color_stop_rgb")).address
  
  lostanza val p_cairo_pattern_add_color_stop_rgba: ptr<((ptr<?>,double,double,double,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_add_color_stop_rgba")).address
  
  lostanza val p_cairo_mesh_pattern_begin_patch: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_mesh_pattern_begin_patch")).address
  
  lostanza val p_cairo_mesh_pattern_end_patch: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_mesh_pattern_end_patch")).address
  
  lostanza val p_cairo_mesh_pattern_curve_to: ptr<((ptr<?>,double,double,double,double,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_mesh_pattern_curve_to")).address
  
  lostanza val p_cairo_mesh_pattern_line_to: ptr<((ptr<?>,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_mesh_pattern_line_to")).address
  
  lostanza val p_cairo_mesh_pattern_move_to: ptr<((ptr<?>,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_mesh_pattern_move_to")).address
  
  lostanza val p_cairo_mesh_pattern_set_control_point: ptr<((ptr<?>,int,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_mesh_pattern_set_control_point")).address
  
  lostanza val p_cairo_mesh_pattern_set_corner_color_rgb: ptr<((ptr<?>,int,double,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_mesh_pattern_set_corner_color_rgb")).address
  
  lostanza val p_cairo_mesh_pattern_set_corner_color_rgba: ptr<((ptr<?>,int,double,double,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_mesh_pattern_set_corner_color_rgba")).address
  
  lostanza val p_cairo_pattern_set_matrix: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_set_matrix")).address
  
  lostanza val p_cairo_pattern_get_matrix: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_get_matrix")).address
  
  lostanza val p_cairo_pattern_set_extend: ptr<((ptr<?>,int) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_set_extend")).address
  
  lostanza val p_cairo_pattern_get_extend: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_get_extend")).address
  
  lostanza val p_cairo_pattern_set_filter: ptr<((ptr<?>,int) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_set_filter")).address
  
  lostanza val p_cairo_pattern_get_filter: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_get_filter")).address
  
  lostanza val p_cairo_pattern_get_rgba: ptr<((ptr<?>,ptr<double>,ptr<double>,ptr<double>,ptr<double>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_get_rgba")).address
  
  lostanza val p_cairo_pattern_get_surface: ptr<((ptr<?>,ptr<ptr<?>>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_get_surface")).address
  
  lostanza val p_cairo_pattern_get_color_stop_rgba: ptr<((ptr<?>,int,ptr<double>,ptr<double>,ptr<double>,ptr<double>,ptr<double>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_get_color_stop_rgba")).address
  
  lostanza val p_cairo_pattern_get_color_stop_count: ptr<((ptr<?>,ptr<int>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_get_color_stop_count")).address
  
  lostanza val p_cairo_pattern_get_linear_points: ptr<((ptr<?>,ptr<double>,ptr<double>,ptr<double>,ptr<double>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_get_linear_points")).address
  
  lostanza val p_cairo_pattern_get_radial_circles: ptr<((ptr<?>,ptr<double>,ptr<double>,ptr<double>,ptr<double>,ptr<double>,ptr<double>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_pattern_get_radial_circles")).address
  
  lostanza val p_cairo_mesh_pattern_get_patch_count: ptr<((ptr<?>,ptr<int>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_mesh_pattern_get_patch_count")).address
  
  lostanza val p_cairo_mesh_pattern_get_path: ptr<((ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_mesh_pattern_get_path")).address
  
  lostanza val p_cairo_mesh_pattern_get_corner_color_rgba: ptr<((ptr<?>,int,int,ptr<double>,ptr<double>,ptr<double>,ptr<double>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_mesh_pattern_get_corner_color_rgba")).address
  
  lostanza val p_cairo_mesh_pattern_get_control_point: ptr<((ptr<?>,int,int,ptr<double>,ptr<double>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_mesh_pattern_get_control_point")).address
  
  lostanza val p_cairo_matrix_init: ptr<((ptr<?>,double,double,double,double,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_matrix_init")).address
  
  lostanza val p_cairo_matrix_init_identity: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_matrix_init_identity")).address
  
  lostanza val p_cairo_matrix_init_translate: ptr<((ptr<?>,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_matrix_init_translate")).address
  
  lostanza val p_cairo_matrix_init_scale: ptr<((ptr<?>,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_matrix_init_scale")).address
  
  lostanza val p_cairo_matrix_init_rotate: ptr<((ptr<?>,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_matrix_init_rotate")).address
  
  lostanza val p_cairo_matrix_translate: ptr<((ptr<?>,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_matrix_translate")).address
  
  lostanza val p_cairo_matrix_scale: ptr<((ptr<?>,double,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_matrix_scale")).address
  
  lostanza val p_cairo_matrix_rotate: ptr<((ptr<?>,double) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_matrix_rotate")).address
  
  lostanza val p_cairo_matrix_invert: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_matrix_invert")).address
  
  lostanza val p_cairo_matrix_multiply: ptr<((ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_matrix_multiply")).address
  
  lostanza val p_cairo_matrix_transform_distance: ptr<((ptr<?>,ptr<double>,ptr<double>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_matrix_transform_distance")).address
  
  lostanza val p_cairo_matrix_transform_point: ptr<((ptr<?>,ptr<double>,ptr<double>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_matrix_transform_point")).address
  
  lostanza val p_cairo_region_create: ptr<(() -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_region_create")).address
  
  lostanza val p_cairo_region_create_rectangle: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_region_create_rectangle")).address
  
  lostanza val p_cairo_region_create_rectangles: ptr<((ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_region_create_rectangles")).address
  
  lostanza val p_cairo_region_copy: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_region_copy")).address
  
  lostanza val p_cairo_region_reference: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("cairo_region_reference")).address
  
  lostanza val p_cairo_region_destroy: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_region_destroy")).address
  
  lostanza val p_cairo_region_equal: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_region_equal")).address
  
  lostanza val p_cairo_region_status: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_region_status")).address
  
  lostanza val p_cairo_region_get_extents: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_region_get_extents")).address
  
  lostanza val p_cairo_region_num_rectangles: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_region_num_rectangles")).address
  
  lostanza val p_cairo_region_get_rectangle: ptr<((ptr<?>,int,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_region_get_rectangle")).address
  
  lostanza val p_cairo_region_is_empty: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_region_is_empty")).address
  
  lostanza val p_cairo_region_contains_rectangle: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_region_contains_rectangle")).address
  
  lostanza val p_cairo_region_contains_point: ptr<((ptr<?>,int,int) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_region_contains_point")).address
  
  lostanza val p_cairo_region_translate: ptr<((ptr<?>,int,int) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_region_translate")).address
  
  lostanza val p_cairo_region_subtract: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_region_subtract")).address
  
  lostanza val p_cairo_region_subtract_rectangle: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_region_subtract_rectangle")).address
  
  lostanza val p_cairo_region_intersect: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_region_intersect")).address
  
  lostanza val p_cairo_region_intersect_rectangle: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_region_intersect_rectangle")).address
  
  lostanza val p_cairo_region_union: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_region_union")).address
  
  lostanza val p_cairo_region_union_rectangle: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_region_union_rectangle")).address
  
  lostanza val p_cairo_region_xor: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_region_xor")).address
  
  lostanza val p_cairo_region_xor_rectangle: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_region_xor_rectangle")).address
  
  lostanza val p_cairo_debug_reset_static_data: ptr<(() -> int)> = 
    dynamic-library-symbol(shlib, String("cairo_debug_reset_static_data")).address
  
  public lostanza defn w_cairo_version () -> int :
    val ret = call-c [p_cairo_version]()
    return ret
  public lostanza defn w_cairo_version_string () -> ptr<byte> :
    val ret = call-c [p_cairo_version_string]()
    return ret
  public lostanza defn w_cairo_create (target:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_create](target)
    return ret
  public lostanza defn w_cairo_reference (cr:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_reference](cr)
    return ret
  public lostanza defn w_cairo_destroy (cr:ptr<?>) -> ref<False> :
    call-c [p_cairo_destroy](cr)
    return false
  public lostanza defn w_cairo_get_reference_count (cr:ptr<?>) -> int :
    val ret = call-c [p_cairo_get_reference_count](cr)
    return ret
  public lostanza defn w_cairo_get_user_data (cr:ptr<?>, key:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_get_user_data](cr, key)
    return ret
  public lostanza defn w_cairo_set_user_data (cr:ptr<?>, key:ptr<?>, user_data:ptr<?>, destroy:ptr<( (ptr<?>) -> int )>) -> int :
    val ret = call-c [p_cairo_set_user_data](cr, key, user_data, destroy)
    return ret
  public lostanza defn w_cairo_save (cr:ptr<?>) -> ref<False> :
    call-c [p_cairo_save](cr)
    return false
  public lostanza defn w_cairo_restore (cr:ptr<?>) -> ref<False> :
    call-c [p_cairo_restore](cr)
    return false
  public lostanza defn w_cairo_push_group (cr:ptr<?>) -> ref<False> :
    call-c [p_cairo_push_group](cr)
    return false
  public lostanza defn w_cairo_push_group_with_content (cr:ptr<?>, content:int) -> ref<False> :
    call-c [p_cairo_push_group_with_content](cr, content)
    return false
  public lostanza defn w_cairo_pop_group (cr:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_pop_group](cr)
    return ret
  public lostanza defn w_cairo_pop_group_to_source (cr:ptr<?>) -> ref<False> :
    call-c [p_cairo_pop_group_to_source](cr)
    return false
  public lostanza defn w_cairo_set_operator (cr:ptr<?>, op:int) -> ref<False> :
    call-c [p_cairo_set_operator](cr, op)
    return false
  public lostanza defn w_cairo_set_source (cr:ptr<?>, source:ptr<?>) -> ref<False> :
    call-c [p_cairo_set_source](cr, source)
    return false
  public lostanza defn w_cairo_set_source_rgb (cr:ptr<?>, red:double, green:double, blue:double) -> ref<False> :
    call-c [p_cairo_set_source_rgb](cr, red, green, blue)
    return false
  public lostanza defn w_cairo_set_source_rgba (cr:ptr<?>, red:double, green:double, blue:double, alpha:double) -> ref<False> :
    call-c [p_cairo_set_source_rgba](cr, red, green, blue, alpha)
    return false
  public lostanza defn w_cairo_set_source_surface (cr:ptr<?>, surface:ptr<?>, x:double, y:double) -> ref<False> :
    call-c [p_cairo_set_source_surface](cr, surface, x, y)
    return false
  public lostanza defn w_cairo_set_tolerance (cr:ptr<?>, tolerance:double) -> ref<False> :
    call-c [p_cairo_set_tolerance](cr, tolerance)
    return false
  public lostanza defn w_cairo_set_antialias (cr:ptr<?>, antialias:int) -> ref<False> :
    call-c [p_cairo_set_antialias](cr, antialias)
    return false
  public lostanza defn w_cairo_set_fill_rule (cr:ptr<?>, fill_rule:int) -> ref<False> :
    call-c [p_cairo_set_fill_rule](cr, fill_rule)
    return false
  public lostanza defn w_cairo_set_line_width (cr:ptr<?>, width:double) -> ref<False> :
    call-c [p_cairo_set_line_width](cr, width)
    return false
  public lostanza defn w_cairo_set_line_cap (cr:ptr<?>, line_cap:int) -> ref<False> :
    call-c [p_cairo_set_line_cap](cr, line_cap)
    return false
  public lostanza defn w_cairo_set_line_join (cr:ptr<?>, line_join:int) -> ref<False> :
    call-c [p_cairo_set_line_join](cr, line_join)
    return false
  public lostanza defn w_cairo_set_dash (cr:ptr<?>, dashes:ptr<double>, num_dashes:int, offset:double) -> ref<False> :
    call-c [p_cairo_set_dash](cr, dashes, num_dashes, offset)
    return false
  public lostanza defn w_cairo_set_miter_limit (cr:ptr<?>, limit:double) -> ref<False> :
    call-c [p_cairo_set_miter_limit](cr, limit)
    return false
  public lostanza defn w_cairo_translate (cr:ptr<?>, tx:double, ty:double) -> ref<False> :
    call-c [p_cairo_translate](cr, tx, ty)
    return false
  public lostanza defn w_cairo_scale (cr:ptr<?>, sx:double, sy:double) -> ref<False> :
    call-c [p_cairo_scale](cr, sx, sy)
    return false
  public lostanza defn w_cairo_rotate (cr:ptr<?>, angle:double) -> ref<False> :
    call-c [p_cairo_rotate](cr, angle)
    return false
  public lostanza defn w_cairo_transform (cr:ptr<?>, matrix:ptr<?>) -> ref<False> :
    call-c [p_cairo_transform](cr, matrix)
    return false
  public lostanza defn w_cairo_set_matrix (cr:ptr<?>, matrix:ptr<?>) -> ref<False> :
    call-c [p_cairo_set_matrix](cr, matrix)
    return false
  public lostanza defn w_cairo_identity_matrix (cr:ptr<?>) -> ref<False> :
    call-c [p_cairo_identity_matrix](cr)
    return false
  public lostanza defn w_cairo_user_to_device (cr:ptr<?>, x:ptr<double>, y:ptr<double>) -> ref<False> :
    call-c [p_cairo_user_to_device](cr, x, y)
    return false
  public lostanza defn w_cairo_user_to_device_distance (cr:ptr<?>, dx:ptr<double>, dy:ptr<double>) -> ref<False> :
    call-c [p_cairo_user_to_device_distance](cr, dx, dy)
    return false
  public lostanza defn w_cairo_device_to_user (cr:ptr<?>, x:ptr<double>, y:ptr<double>) -> ref<False> :
    call-c [p_cairo_device_to_user](cr, x, y)
    return false
  public lostanza defn w_cairo_device_to_user_distance (cr:ptr<?>, dx:ptr<double>, dy:ptr<double>) -> ref<False> :
    call-c [p_cairo_device_to_user_distance](cr, dx, dy)
    return false
  public lostanza defn w_cairo_new_path (cr:ptr<?>) -> ref<False> :
    call-c [p_cairo_new_path](cr)
    return false
  public lostanza defn w_cairo_move_to (cr:ptr<?>, x:double, y:double) -> ref<False> :
    call-c [p_cairo_move_to](cr, x, y)
    return false
  public lostanza defn w_cairo_new_sub_path (cr:ptr<?>) -> ref<False> :
    call-c [p_cairo_new_sub_path](cr)
    return false
  public lostanza defn w_cairo_line_to (cr:ptr<?>, x:double, y:double) -> ref<False> :
    call-c [p_cairo_line_to](cr, x, y)
    return false
  public lostanza defn w_cairo_curve_to (cr:ptr<?>, x1:double, y1:double, x2:double, y2:double, x3:double, y3:double) -> ref<False> :
    call-c [p_cairo_curve_to](cr, x1, y1, x2, y2, x3, y3)
    return false
  public lostanza defn w_cairo_arc (cr:ptr<?>, xc:double, yc:double, radius:double, angle1:double, angle2:double) -> ref<False> :
    call-c [p_cairo_arc](cr, xc, yc, radius, angle1, angle2)
    return false
  public lostanza defn w_cairo_arc_negative (cr:ptr<?>, xc:double, yc:double, radius:double, angle1:double, angle2:double) -> ref<False> :
    call-c [p_cairo_arc_negative](cr, xc, yc, radius, angle1, angle2)
    return false
  public lostanza defn w_cairo_rel_move_to (cr:ptr<?>, dx:double, dy:double) -> ref<False> :
    call-c [p_cairo_rel_move_to](cr, dx, dy)
    return false
  public lostanza defn w_cairo_rel_line_to (cr:ptr<?>, dx:double, dy:double) -> ref<False> :
    call-c [p_cairo_rel_line_to](cr, dx, dy)
    return false
  public lostanza defn w_cairo_rel_curve_to (cr:ptr<?>, dx1:double, dy1:double, dx2:double, dy2:double, dx3:double, dy3:double) -> ref<False> :
    call-c [p_cairo_rel_curve_to](cr, dx1, dy1, dx2, dy2, dx3, dy3)
    return false
  public lostanza defn w_cairo_rectangle (cr:ptr<?>, x:double, y:double, width:double, height:double) -> ref<False> :
    call-c [p_cairo_rectangle](cr, x, y, width, height)
    return false
  public lostanza defn w_cairo_close_path (cr:ptr<?>) -> ref<False> :
    call-c [p_cairo_close_path](cr)
    return false
  public lostanza defn w_cairo_path_extents (cr:ptr<?>, x1:ptr<double>, y1:ptr<double>, x2:ptr<double>, y2:ptr<double>) -> ref<False> :
    call-c [p_cairo_path_extents](cr, x1, y1, x2, y2)
    return false
  public lostanza defn w_cairo_paint (cr:ptr<?>) -> ref<False> :
    call-c [p_cairo_paint](cr)
    return false
  public lostanza defn w_cairo_paint_with_alpha (cr:ptr<?>, alpha:double) -> ref<False> :
    call-c [p_cairo_paint_with_alpha](cr, alpha)
    return false
  public lostanza defn w_cairo_mask (cr:ptr<?>, pattern:ptr<?>) -> ref<False> :
    call-c [p_cairo_mask](cr, pattern)
    return false
  public lostanza defn w_cairo_mask_surface (cr:ptr<?>, surface:ptr<?>, surface_x:double, surface_y:double) -> ref<False> :
    call-c [p_cairo_mask_surface](cr, surface, surface_x, surface_y)
    return false
  public lostanza defn w_cairo_stroke (cr:ptr<?>) -> ref<False> :
    call-c [p_cairo_stroke](cr)
    return false
  public lostanza defn w_cairo_stroke_preserve (cr:ptr<?>) -> ref<False> :
    call-c [p_cairo_stroke_preserve](cr)
    return false
  public lostanza defn w_cairo_fill (cr:ptr<?>) -> ref<False> :
    call-c [p_cairo_fill](cr)
    return false
  public lostanza defn w_cairo_fill_preserve (cr:ptr<?>) -> ref<False> :
    call-c [p_cairo_fill_preserve](cr)
    return false
  public lostanza defn w_cairo_copy_page (cr:ptr<?>) -> ref<False> :
    call-c [p_cairo_copy_page](cr)
    return false
  public lostanza defn w_cairo_show_page (cr:ptr<?>) -> ref<False> :
    call-c [p_cairo_show_page](cr)
    return false
  public lostanza defn w_cairo_in_stroke (cr:ptr<?>, x:double, y:double) -> int :
    val ret = call-c [p_cairo_in_stroke](cr, x, y)
    return ret
  public lostanza defn w_cairo_in_fill (cr:ptr<?>, x:double, y:double) -> int :
    val ret = call-c [p_cairo_in_fill](cr, x, y)
    return ret
  public lostanza defn w_cairo_in_clip (cr:ptr<?>, x:double, y:double) -> int :
    val ret = call-c [p_cairo_in_clip](cr, x, y)
    return ret
  public lostanza defn w_cairo_stroke_extents (cr:ptr<?>, x1:ptr<double>, y1:ptr<double>, x2:ptr<double>, y2:ptr<double>) -> ref<False> :
    call-c [p_cairo_stroke_extents](cr, x1, y1, x2, y2)
    return false
  public lostanza defn w_cairo_fill_extents (cr:ptr<?>, x1:ptr<double>, y1:ptr<double>, x2:ptr<double>, y2:ptr<double>) -> ref<False> :
    call-c [p_cairo_fill_extents](cr, x1, y1, x2, y2)
    return false
  public lostanza defn w_cairo_reset_clip (cr:ptr<?>) -> ref<False> :
    call-c [p_cairo_reset_clip](cr)
    return false
  public lostanza defn w_cairo_clip (cr:ptr<?>) -> ref<False> :
    call-c [p_cairo_clip](cr)
    return false
  public lostanza defn w_cairo_clip_preserve (cr:ptr<?>) -> ref<False> :
    call-c [p_cairo_clip_preserve](cr)
    return false
  public lostanza defn w_cairo_clip_extents (cr:ptr<?>, x1:ptr<double>, y1:ptr<double>, x2:ptr<double>, y2:ptr<double>) -> ref<False> :
    call-c [p_cairo_clip_extents](cr, x1, y1, x2, y2)
    return false
  public lostanza defn w_cairo_copy_clip_rectangle_list (cr:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_copy_clip_rectangle_list](cr)
    return ret
  public lostanza defn w_cairo_rectangle_list_destroy (rectangle_list:ptr<?>) -> ref<False> :
    call-c [p_cairo_rectangle_list_destroy](rectangle_list)
    return false
  public lostanza defn w_cairo_glyph_allocate (num_glyphs:int) -> ptr<?> :
    val ret = call-c [p_cairo_glyph_allocate](num_glyphs)
    return ret
  public lostanza defn w_cairo_glyph_free (glyphs:ptr<?>) -> ref<False> :
    call-c [p_cairo_glyph_free](glyphs)
    return false
  public lostanza defn w_cairo_text_cluster_allocate (num_clusters:int) -> ptr<?> :
    val ret = call-c [p_cairo_text_cluster_allocate](num_clusters)
    return ret
  public lostanza defn w_cairo_text_cluster_free (clusters:ptr<?>) -> ref<False> :
    call-c [p_cairo_text_cluster_free](clusters)
    return false
  public lostanza defn w_cairo_font_options_create () -> ptr<?> :
    val ret = call-c [p_cairo_font_options_create]()
    return ret
  public lostanza defn w_cairo_font_options_copy (original:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_font_options_copy](original)
    return ret
  public lostanza defn w_cairo_font_options_destroy (options:ptr<?>) -> ref<False> :
    call-c [p_cairo_font_options_destroy](options)
    return false
  public lostanza defn w_cairo_font_options_status (options:ptr<?>) -> int :
    val ret = call-c [p_cairo_font_options_status](options)
    return ret
  public lostanza defn w_cairo_font_options_merge (options:ptr<?>, other:ptr<?>) -> ref<False> :
    call-c [p_cairo_font_options_merge](options, other)
    return false
  public lostanza defn w_cairo_font_options_equal (options:ptr<?>, other:ptr<?>) -> int :
    val ret = call-c [p_cairo_font_options_equal](options, other)
    return ret
  public lostanza defn w_cairo_font_options_hash (options:ptr<?>) -> long :
    val ret = call-c [p_cairo_font_options_hash](options)
    return ret
  public lostanza defn w_cairo_font_options_set_antialias (options:ptr<?>, antialias:int) -> ref<False> :
    call-c [p_cairo_font_options_set_antialias](options, antialias)
    return false
  public lostanza defn w_cairo_font_options_get_antialias (options:ptr<?>) -> int :
    val ret = call-c [p_cairo_font_options_get_antialias](options)
    return ret
  public lostanza defn w_cairo_font_options_set_subpixel_order (options:ptr<?>, subpixel_order:int) -> ref<False> :
    call-c [p_cairo_font_options_set_subpixel_order](options, subpixel_order)
    return false
  public lostanza defn w_cairo_font_options_get_subpixel_order (options:ptr<?>) -> int :
    val ret = call-c [p_cairo_font_options_get_subpixel_order](options)
    return ret
  public lostanza defn w_cairo_font_options_set_hint_style (options:ptr<?>, hint_style:int) -> ref<False> :
    call-c [p_cairo_font_options_set_hint_style](options, hint_style)
    return false
  public lostanza defn w_cairo_font_options_get_hint_style (options:ptr<?>) -> int :
    val ret = call-c [p_cairo_font_options_get_hint_style](options)
    return ret
  public lostanza defn w_cairo_font_options_set_hint_metrics (options:ptr<?>, hint_metrics:int) -> ref<False> :
    call-c [p_cairo_font_options_set_hint_metrics](options, hint_metrics)
    return false
  public lostanza defn w_cairo_font_options_get_hint_metrics (options:ptr<?>) -> int :
    val ret = call-c [p_cairo_font_options_get_hint_metrics](options)
    return ret
  public lostanza defn w_cairo_select_font_face (cr:ptr<?>, family:ptr<byte>, slant:int, weight:int) -> ref<False> :
    call-c [p_cairo_select_font_face](cr, family, slant, weight)
    return false
  public lostanza defn w_cairo_set_font_size (cr:ptr<?>, size:double) -> ref<False> :
    call-c [p_cairo_set_font_size](cr, size)
    return false
  public lostanza defn w_cairo_set_font_matrix (cr:ptr<?>, matrix:ptr<?>) -> ref<False> :
    call-c [p_cairo_set_font_matrix](cr, matrix)
    return false
  public lostanza defn w_cairo_get_font_matrix (cr:ptr<?>, matrix:ptr<?>) -> ref<False> :
    call-c [p_cairo_get_font_matrix](cr, matrix)
    return false
  public lostanza defn w_cairo_set_font_options (cr:ptr<?>, options:ptr<?>) -> ref<False> :
    call-c [p_cairo_set_font_options](cr, options)
    return false
  public lostanza defn w_cairo_get_font_options (cr:ptr<?>, options:ptr<?>) -> ref<False> :
    call-c [p_cairo_get_font_options](cr, options)
    return false
  public lostanza defn w_cairo_set_font_face (cr:ptr<?>, font_face:ptr<?>) -> ref<False> :
    call-c [p_cairo_set_font_face](cr, font_face)
    return false
  public lostanza defn w_cairo_get_font_face (cr:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_get_font_face](cr)
    return ret
  public lostanza defn w_cairo_set_scaled_font (cr:ptr<?>, scaled_font:ptr<?>) -> ref<False> :
    call-c [p_cairo_set_scaled_font](cr, scaled_font)
    return false
  public lostanza defn w_cairo_get_scaled_font (cr:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_get_scaled_font](cr)
    return ret
  public lostanza defn w_cairo_show_text (cr:ptr<?>, utf8:ptr<byte>) -> ref<False> :
    call-c [p_cairo_show_text](cr, utf8)
    return false
  public lostanza defn w_cairo_show_glyphs (cr:ptr<?>, glyphs:ptr<?>, num_glyphs:int) -> ref<False> :
    call-c [p_cairo_show_glyphs](cr, glyphs, num_glyphs)
    return false
  public lostanza defn w_cairo_show_text_glyphs (cr:ptr<?>, utf8:ptr<byte>, utf8_len:int, glyphs:ptr<?>, num_glyphs:int, clusters:ptr<?>, num_clusters:int, cluster_flags:int) -> ref<False> :
    call-c [p_cairo_show_text_glyphs](cr, utf8, utf8_len, glyphs, num_glyphs, clusters, num_clusters, cluster_flags)
    return false
  public lostanza defn w_cairo_text_path (cr:ptr<?>, utf8:ptr<byte>) -> ref<False> :
    call-c [p_cairo_text_path](cr, utf8)
    return false
  public lostanza defn w_cairo_glyph_path (cr:ptr<?>, glyphs:ptr<?>, num_glyphs:int) -> ref<False> :
    call-c [p_cairo_glyph_path](cr, glyphs, num_glyphs)
    return false
  public lostanza defn w_cairo_text_extents (cr:ptr<?>, utf8:ptr<byte>, extents:ptr<?>) -> ref<False> :
    call-c [p_cairo_text_extents](cr, utf8, extents)
    return false
  public lostanza defn w_cairo_glyph_extents (cr:ptr<?>, glyphs:ptr<?>, num_glyphs:int, extents:ptr<?>) -> ref<False> :
    call-c [p_cairo_glyph_extents](cr, glyphs, num_glyphs, extents)
    return false
  public lostanza defn w_cairo_font_extents (cr:ptr<?>, extents:ptr<?>) -> ref<False> :
    call-c [p_cairo_font_extents](cr, extents)
    return false
  public lostanza defn w_cairo_font_face_reference (font_face:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_font_face_reference](font_face)
    return ret
  public lostanza defn w_cairo_font_face_destroy (font_face:ptr<?>) -> ref<False> :
    call-c [p_cairo_font_face_destroy](font_face)
    return false
  public lostanza defn w_cairo_font_face_get_reference_count (font_face:ptr<?>) -> int :
    val ret = call-c [p_cairo_font_face_get_reference_count](font_face)
    return ret
  public lostanza defn w_cairo_font_face_status (font_face:ptr<?>) -> int :
    val ret = call-c [p_cairo_font_face_status](font_face)
    return ret
  public lostanza defn w_cairo_font_face_get_type (font_face:ptr<?>) -> int :
    val ret = call-c [p_cairo_font_face_get_type](font_face)
    return ret
  public lostanza defn w_cairo_font_face_get_user_data (font_face:ptr<?>, key:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_font_face_get_user_data](font_face, key)
    return ret
  public lostanza defn w_cairo_font_face_set_user_data (font_face:ptr<?>, key:ptr<?>, user_data:ptr<?>, destroy:ptr<( (ptr<?>) -> int )>) -> int :
    val ret = call-c [p_cairo_font_face_set_user_data](font_face, key, user_data, destroy)
    return ret
  public lostanza defn w_cairo_scaled_font_create (font_face:ptr<?>, font_matrix:ptr<?>, ctm:ptr<?>, options:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_scaled_font_create](font_face, font_matrix, ctm, options)
    return ret
  public lostanza defn w_cairo_scaled_font_reference (scaled_font:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_scaled_font_reference](scaled_font)
    return ret
  public lostanza defn w_cairo_scaled_font_destroy (scaled_font:ptr<?>) -> ref<False> :
    call-c [p_cairo_scaled_font_destroy](scaled_font)
    return false
  public lostanza defn w_cairo_scaled_font_get_reference_count (scaled_font:ptr<?>) -> int :
    val ret = call-c [p_cairo_scaled_font_get_reference_count](scaled_font)
    return ret
  public lostanza defn w_cairo_scaled_font_status (scaled_font:ptr<?>) -> int :
    val ret = call-c [p_cairo_scaled_font_status](scaled_font)
    return ret
  public lostanza defn w_cairo_scaled_font_get_type (scaled_font:ptr<?>) -> int :
    val ret = call-c [p_cairo_scaled_font_get_type](scaled_font)
    return ret
  public lostanza defn w_cairo_scaled_font_get_user_data (scaled_font:ptr<?>, key:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_scaled_font_get_user_data](scaled_font, key)
    return ret
  public lostanza defn w_cairo_scaled_font_set_user_data (scaled_font:ptr<?>, key:ptr<?>, user_data:ptr<?>, destroy:ptr<( (ptr<?>) -> int )>) -> int :
    val ret = call-c [p_cairo_scaled_font_set_user_data](scaled_font, key, user_data, destroy)
    return ret
  public lostanza defn w_cairo_scaled_font_extents (scaled_font:ptr<?>, extents:ptr<?>) -> ref<False> :
    call-c [p_cairo_scaled_font_extents](scaled_font, extents)
    return false
  public lostanza defn w_cairo_scaled_font_text_extents (scaled_font:ptr<?>, utf8:ptr<byte>, extents:ptr<?>) -> ref<False> :
    call-c [p_cairo_scaled_font_text_extents](scaled_font, utf8, extents)
    return false
  public lostanza defn w_cairo_scaled_font_glyph_extents (scaled_font:ptr<?>, glyphs:ptr<?>, num_glyphs:int, extents:ptr<?>) -> ref<False> :
    call-c [p_cairo_scaled_font_glyph_extents](scaled_font, glyphs, num_glyphs, extents)
    return false
  public lostanza defn w_cairo_scaled_font_text_to_glyphs (scaled_font:ptr<?>, x:double, y:double, utf8:ptr<byte>, utf8_len:int, glyphs:ptr<ptr<?>>, num_glyphs:ptr<int>, clusters:ptr<ptr<?>>, num_clusters:ptr<int>, cluster_flags:ptr<int>) -> int :
    val ret = call-c [p_cairo_scaled_font_text_to_glyphs](scaled_font, x, y, utf8, utf8_len, glyphs, num_glyphs, clusters, num_clusters, cluster_flags)
    return ret
  public lostanza defn w_cairo_scaled_font_get_font_face (scaled_font:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_scaled_font_get_font_face](scaled_font)
    return ret
  public lostanza defn w_cairo_scaled_font_get_font_matrix (scaled_font:ptr<?>, font_matrix:ptr<?>) -> ref<False> :
    call-c [p_cairo_scaled_font_get_font_matrix](scaled_font, font_matrix)
    return false
  public lostanza defn w_cairo_scaled_font_get_ctm (scaled_font:ptr<?>, ctm:ptr<?>) -> ref<False> :
    call-c [p_cairo_scaled_font_get_ctm](scaled_font, ctm)
    return false
  public lostanza defn w_cairo_scaled_font_get_scale_matrix (scaled_font:ptr<?>, scale_matrix:ptr<?>) -> ref<False> :
    call-c [p_cairo_scaled_font_get_scale_matrix](scaled_font, scale_matrix)
    return false
  public lostanza defn w_cairo_scaled_font_get_font_options (scaled_font:ptr<?>, options:ptr<?>) -> ref<False> :
    call-c [p_cairo_scaled_font_get_font_options](scaled_font, options)
    return false
  public lostanza defn w_cairo_toy_font_face_create (family:ptr<byte>, slant:int, weight:int) -> ptr<?> :
    val ret = call-c [p_cairo_toy_font_face_create](family, slant, weight)
    return ret
  public lostanza defn w_cairo_toy_font_face_get_family (font_face:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_cairo_toy_font_face_get_family](font_face)
    return ret
  public lostanza defn w_cairo_toy_font_face_get_slant (font_face:ptr<?>) -> int :
    val ret = call-c [p_cairo_toy_font_face_get_slant](font_face)
    return ret
  public lostanza defn w_cairo_toy_font_face_get_weight (font_face:ptr<?>) -> int :
    val ret = call-c [p_cairo_toy_font_face_get_weight](font_face)
    return ret
  public lostanza defn w_cairo_user_font_face_create () -> ptr<?> :
    val ret = call-c [p_cairo_user_font_face_create]()
    return ret
  public lostanza defn w_cairo_user_font_face_set_init_func (font_face:ptr<?>, init_func:ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>) -> ref<False> :
    call-c [p_cairo_user_font_face_set_init_func](font_face, init_func)
    return false
  public lostanza defn w_cairo_user_font_face_set_render_glyph_func (font_face:ptr<?>, render_glyph_func:ptr<( (ptr<?>,long,ptr<?>,ptr<?>) -> int )>) -> ref<False> :
    call-c [p_cairo_user_font_face_set_render_glyph_func](font_face, render_glyph_func)
    return false
  public lostanza defn w_cairo_user_font_face_set_text_to_glyphs_func (font_face:ptr<?>, text_to_glyphs_func:ptr<( (ptr<?>,ptr<byte>,int,ptr<ptr<?>>,ptr<int>,ptr<ptr<?>>,ptr<int>,ptr<int>) -> int )>) -> ref<False> :
    call-c [p_cairo_user_font_face_set_text_to_glyphs_func](font_face, text_to_glyphs_func)
    return false
  public lostanza defn w_cairo_user_font_face_set_unicode_to_glyph_func (font_face:ptr<?>, unicode_to_glyph_func:ptr<( (ptr<?>,long,ptr<long>) -> int )>) -> ref<False> :
    call-c [p_cairo_user_font_face_set_unicode_to_glyph_func](font_face, unicode_to_glyph_func)
    return false
  public lostanza defn w_cairo_user_font_face_get_init_func (font_face:ptr<?>) -> ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )> :
    val ret = call-c [p_cairo_user_font_face_get_init_func](font_face)
    return ret
  public lostanza defn w_cairo_user_font_face_get_render_glyph_func (font_face:ptr<?>) -> ptr<( (ptr<?>,long,ptr<?>,ptr<?>) -> int )> :
    val ret = call-c [p_cairo_user_font_face_get_render_glyph_func](font_face)
    return ret
  public lostanza defn w_cairo_user_font_face_get_text_to_glyphs_func (font_face:ptr<?>) -> ptr<( (ptr<?>,ptr<byte>,int,ptr<ptr<?>>,ptr<int>,ptr<ptr<?>>,ptr<int>,ptr<int>) -> int )> :
    val ret = call-c [p_cairo_user_font_face_get_text_to_glyphs_func](font_face)
    return ret
  public lostanza defn w_cairo_user_font_face_get_unicode_to_glyph_func (font_face:ptr<?>) -> ptr<( (ptr<?>,long,ptr<long>) -> int )> :
    val ret = call-c [p_cairo_user_font_face_get_unicode_to_glyph_func](font_face)
    return ret
  public lostanza defn w_cairo_get_operator (cr:ptr<?>) -> int :
    val ret = call-c [p_cairo_get_operator](cr)
    return ret
  public lostanza defn w_cairo_get_source (cr:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_get_source](cr)
    return ret
  public lostanza defn w_cairo_get_tolerance (cr:ptr<?>) -> double :
    val ret = call-c [p_cairo_get_tolerance](cr)
    return ret
  public lostanza defn w_cairo_get_antialias (cr:ptr<?>) -> int :
    val ret = call-c [p_cairo_get_antialias](cr)
    return ret
  public lostanza defn w_cairo_has_current_point (cr:ptr<?>) -> int :
    val ret = call-c [p_cairo_has_current_point](cr)
    return ret
  public lostanza defn w_cairo_get_current_point (cr:ptr<?>, x:ptr<double>, y:ptr<double>) -> ref<False> :
    call-c [p_cairo_get_current_point](cr, x, y)
    return false
  public lostanza defn w_cairo_get_fill_rule (cr:ptr<?>) -> int :
    val ret = call-c [p_cairo_get_fill_rule](cr)
    return ret
  public lostanza defn w_cairo_get_line_width (cr:ptr<?>) -> double :
    val ret = call-c [p_cairo_get_line_width](cr)
    return ret
  public lostanza defn w_cairo_get_line_cap (cr:ptr<?>) -> int :
    val ret = call-c [p_cairo_get_line_cap](cr)
    return ret
  public lostanza defn w_cairo_get_line_join (cr:ptr<?>) -> int :
    val ret = call-c [p_cairo_get_line_join](cr)
    return ret
  public lostanza defn w_cairo_get_miter_limit (cr:ptr<?>) -> double :
    val ret = call-c [p_cairo_get_miter_limit](cr)
    return ret
  public lostanza defn w_cairo_get_dash_count (cr:ptr<?>) -> int :
    val ret = call-c [p_cairo_get_dash_count](cr)
    return ret
  public lostanza defn w_cairo_get_dash (cr:ptr<?>, dashes:ptr<double>, offset:ptr<double>) -> ref<False> :
    call-c [p_cairo_get_dash](cr, dashes, offset)
    return false
  public lostanza defn w_cairo_get_matrix (cr:ptr<?>, matrix:ptr<?>) -> ref<False> :
    call-c [p_cairo_get_matrix](cr, matrix)
    return false
  public lostanza defn w_cairo_get_target (cr:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_get_target](cr)
    return ret
  public lostanza defn w_cairo_get_group_target (cr:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_get_group_target](cr)
    return ret
  public lostanza defn w_cairo_copy_path (cr:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_copy_path](cr)
    return ret
  public lostanza defn w_cairo_copy_path_flat (cr:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_copy_path_flat](cr)
    return ret
  public lostanza defn w_cairo_append_path (cr:ptr<?>, path:ptr<?>) -> ref<False> :
    call-c [p_cairo_append_path](cr, path)
    return false
  public lostanza defn w_cairo_path_destroy (path:ptr<?>) -> ref<False> :
    call-c [p_cairo_path_destroy](path)
    return false
  public lostanza defn w_cairo_status (cr:ptr<?>) -> int :
    val ret = call-c [p_cairo_status](cr)
    return ret
  public lostanza defn w_cairo_status_to_string (status:int) -> ptr<byte> :
    val ret = call-c [p_cairo_status_to_string](status)
    return ret
  public lostanza defn w_cairo_device_reference (device:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_device_reference](device)
    return ret
  public lostanza defn w_cairo_device_get_type (device:ptr<?>) -> int :
    val ret = call-c [p_cairo_device_get_type](device)
    return ret
  public lostanza defn w_cairo_device_status (device:ptr<?>) -> int :
    val ret = call-c [p_cairo_device_status](device)
    return ret
  public lostanza defn w_cairo_device_acquire (device:ptr<?>) -> int :
    val ret = call-c [p_cairo_device_acquire](device)
    return ret
  public lostanza defn w_cairo_device_release (device:ptr<?>) -> ref<False> :
    call-c [p_cairo_device_release](device)
    return false
  public lostanza defn w_cairo_device_flush (device:ptr<?>) -> ref<False> :
    call-c [p_cairo_device_flush](device)
    return false
  public lostanza defn w_cairo_device_finish (device:ptr<?>) -> ref<False> :
    call-c [p_cairo_device_finish](device)
    return false
  public lostanza defn w_cairo_device_destroy (device:ptr<?>) -> ref<False> :
    call-c [p_cairo_device_destroy](device)
    return false
  public lostanza defn w_cairo_device_get_reference_count (device:ptr<?>) -> int :
    val ret = call-c [p_cairo_device_get_reference_count](device)
    return ret
  public lostanza defn w_cairo_device_get_user_data (device:ptr<?>, key:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_device_get_user_data](device, key)
    return ret
  public lostanza defn w_cairo_device_set_user_data (device:ptr<?>, key:ptr<?>, user_data:ptr<?>, destroy:ptr<( (ptr<?>) -> int )>) -> int :
    val ret = call-c [p_cairo_device_set_user_data](device, key, user_data, destroy)
    return ret
  public lostanza defn w_cairo_surface_create_similar (other:ptr<?>, content:int, width:int, height:int) -> ptr<?> :
    val ret = call-c [p_cairo_surface_create_similar](other, content, width, height)
    return ret
  public lostanza defn w_cairo_surface_create_similar_image (other:ptr<?>, format:int, width:int, height:int) -> ptr<?> :
    val ret = call-c [p_cairo_surface_create_similar_image](other, format, width, height)
    return ret
  public lostanza defn w_cairo_surface_map_to_image (surface:ptr<?>, extents:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_surface_map_to_image](surface, extents)
    return ret
  public lostanza defn w_cairo_surface_unmap_image (surface:ptr<?>, image:ptr<?>) -> ref<False> :
    call-c [p_cairo_surface_unmap_image](surface, image)
    return false
  public lostanza defn w_cairo_surface_create_for_rectangle (target:ptr<?>, x:double, y:double, width:double, height:double) -> ptr<?> :
    val ret = call-c [p_cairo_surface_create_for_rectangle](target, x, y, width, height)
    return ret
  public lostanza defn w_cairo_surface_create_observer (target:ptr<?>, mode:int) -> ptr<?> :
    val ret = call-c [p_cairo_surface_create_observer](target, mode)
    return ret
  public lostanza defn w_cairo_surface_observer_add_paint_callback (abstract_surface:ptr<?>, func:ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>, data:ptr<?>) -> int :
    val ret = call-c [p_cairo_surface_observer_add_paint_callback](abstract_surface, func, data)
    return ret
  public lostanza defn w_cairo_surface_observer_add_mask_callback (abstract_surface:ptr<?>, func:ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>, data:ptr<?>) -> int :
    val ret = call-c [p_cairo_surface_observer_add_mask_callback](abstract_surface, func, data)
    return ret
  public lostanza defn w_cairo_surface_observer_add_fill_callback (abstract_surface:ptr<?>, func:ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>, data:ptr<?>) -> int :
    val ret = call-c [p_cairo_surface_observer_add_fill_callback](abstract_surface, func, data)
    return ret
  public lostanza defn w_cairo_surface_observer_add_stroke_callback (abstract_surface:ptr<?>, func:ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>, data:ptr<?>) -> int :
    val ret = call-c [p_cairo_surface_observer_add_stroke_callback](abstract_surface, func, data)
    return ret
  public lostanza defn w_cairo_surface_observer_add_glyphs_callback (abstract_surface:ptr<?>, func:ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>, data:ptr<?>) -> int :
    val ret = call-c [p_cairo_surface_observer_add_glyphs_callback](abstract_surface, func, data)
    return ret
  public lostanza defn w_cairo_surface_observer_add_flush_callback (abstract_surface:ptr<?>, func:ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>, data:ptr<?>) -> int :
    val ret = call-c [p_cairo_surface_observer_add_flush_callback](abstract_surface, func, data)
    return ret
  public lostanza defn w_cairo_surface_observer_add_finish_callback (abstract_surface:ptr<?>, func:ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>, data:ptr<?>) -> int :
    val ret = call-c [p_cairo_surface_observer_add_finish_callback](abstract_surface, func, data)
    return ret
  public lostanza defn w_cairo_surface_observer_print (surface:ptr<?>, write_func:ptr<( (ptr<?>,ptr<byte>,int) -> int )>, closure:ptr<?>) -> int :
    val ret = call-c [p_cairo_surface_observer_print](surface, write_func, closure)
    return ret
  public lostanza defn w_cairo_surface_observer_elapsed (surface:ptr<?>) -> double :
    val ret = call-c [p_cairo_surface_observer_elapsed](surface)
    return ret
  public lostanza defn w_cairo_device_observer_print (device:ptr<?>, write_func:ptr<( (ptr<?>,ptr<byte>,int) -> int )>, closure:ptr<?>) -> int :
    val ret = call-c [p_cairo_device_observer_print](device, write_func, closure)
    return ret
  public lostanza defn w_cairo_device_observer_elapsed (device:ptr<?>) -> double :
    val ret = call-c [p_cairo_device_observer_elapsed](device)
    return ret
  public lostanza defn w_cairo_device_observer_paint_elapsed (device:ptr<?>) -> double :
    val ret = call-c [p_cairo_device_observer_paint_elapsed](device)
    return ret
  public lostanza defn w_cairo_device_observer_mask_elapsed (device:ptr<?>) -> double :
    val ret = call-c [p_cairo_device_observer_mask_elapsed](device)
    return ret
  public lostanza defn w_cairo_device_observer_fill_elapsed (device:ptr<?>) -> double :
    val ret = call-c [p_cairo_device_observer_fill_elapsed](device)
    return ret
  public lostanza defn w_cairo_device_observer_stroke_elapsed (device:ptr<?>) -> double :
    val ret = call-c [p_cairo_device_observer_stroke_elapsed](device)
    return ret
  public lostanza defn w_cairo_device_observer_glyphs_elapsed (device:ptr<?>) -> double :
    val ret = call-c [p_cairo_device_observer_glyphs_elapsed](device)
    return ret
  public lostanza defn w_cairo_surface_reference (surface:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_surface_reference](surface)
    return ret
  public lostanza defn w_cairo_surface_finish (surface:ptr<?>) -> ref<False> :
    call-c [p_cairo_surface_finish](surface)
    return false
  public lostanza defn w_cairo_surface_destroy (surface:ptr<?>) -> ref<False> :
    call-c [p_cairo_surface_destroy](surface)
    return false
  public lostanza defn w_cairo_surface_get_device (surface:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_surface_get_device](surface)
    return ret
  public lostanza defn w_cairo_surface_get_reference_count (surface:ptr<?>) -> int :
    val ret = call-c [p_cairo_surface_get_reference_count](surface)
    return ret
  public lostanza defn w_cairo_surface_status (surface:ptr<?>) -> int :
    val ret = call-c [p_cairo_surface_status](surface)
    return ret
  public lostanza defn w_cairo_surface_get_type (surface:ptr<?>) -> int :
    val ret = call-c [p_cairo_surface_get_type](surface)
    return ret
  public lostanza defn w_cairo_surface_get_content (surface:ptr<?>) -> int :
    val ret = call-c [p_cairo_surface_get_content](surface)
    return ret
  public lostanza defn w_cairo_surface_write_to_png (surface:ptr<?>, filename:ptr<byte>) -> int :
    val ret = call-c [p_cairo_surface_write_to_png](surface, filename)
    return ret
  public lostanza defn w_cairo_surface_write_to_png_stream (surface:ptr<?>, write_func:ptr<( (ptr<?>,ptr<byte>,int) -> int )>, closure:ptr<?>) -> int :
    val ret = call-c [p_cairo_surface_write_to_png_stream](surface, write_func, closure)
    return ret
  public lostanza defn w_cairo_surface_get_user_data (surface:ptr<?>, key:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_surface_get_user_data](surface, key)
    return ret
  public lostanza defn w_cairo_surface_set_user_data (surface:ptr<?>, key:ptr<?>, user_data:ptr<?>, destroy:ptr<( (ptr<?>) -> int )>) -> int :
    val ret = call-c [p_cairo_surface_set_user_data](surface, key, user_data, destroy)
    return ret
  public lostanza defn w_cairo_surface_get_mime_data (surface:ptr<?>, mime_type:ptr<byte>, data:ptr<ptr<byte>>, length:ptr<long>) -> ref<False> :
    call-c [p_cairo_surface_get_mime_data](surface, mime_type, data, length)
    return false
  public lostanza defn w_cairo_surface_set_mime_data (surface:ptr<?>, mime_type:ptr<byte>, data:ptr<byte>, length:long, destroy:ptr<( (ptr<?>) -> int )>, closure:ptr<?>) -> int :
    val ret = call-c [p_cairo_surface_set_mime_data](surface, mime_type, data, length, destroy, closure)
    return ret
  public lostanza defn w_cairo_surface_supports_mime_type (surface:ptr<?>, mime_type:ptr<byte>) -> int :
    val ret = call-c [p_cairo_surface_supports_mime_type](surface, mime_type)
    return ret
  public lostanza defn w_cairo_surface_get_font_options (surface:ptr<?>, options:ptr<?>) -> ref<False> :
    call-c [p_cairo_surface_get_font_options](surface, options)
    return false
  public lostanza defn w_cairo_surface_flush (surface:ptr<?>) -> ref<False> :
    call-c [p_cairo_surface_flush](surface)
    return false
  public lostanza defn w_cairo_surface_mark_dirty (surface:ptr<?>) -> ref<False> :
    call-c [p_cairo_surface_mark_dirty](surface)
    return false
  public lostanza defn w_cairo_surface_mark_dirty_rectangle (surface:ptr<?>, x:int, y:int, width:int, height:int) -> ref<False> :
    call-c [p_cairo_surface_mark_dirty_rectangle](surface, x, y, width, height)
    return false
  public lostanza defn w_cairo_surface_set_device_scale (surface:ptr<?>, x_scale:double, y_scale:double) -> ref<False> :
    call-c [p_cairo_surface_set_device_scale](surface, x_scale, y_scale)
    return false
  public lostanza defn w_cairo_surface_get_device_scale (surface:ptr<?>, x_scale:ptr<double>, y_scale:ptr<double>) -> ref<False> :
    call-c [p_cairo_surface_get_device_scale](surface, x_scale, y_scale)
    return false
  public lostanza defn w_cairo_surface_set_device_offset (surface:ptr<?>, x_offset:double, y_offset:double) -> ref<False> :
    call-c [p_cairo_surface_set_device_offset](surface, x_offset, y_offset)
    return false
  public lostanza defn w_cairo_surface_get_device_offset (surface:ptr<?>, x_offset:ptr<double>, y_offset:ptr<double>) -> ref<False> :
    call-c [p_cairo_surface_get_device_offset](surface, x_offset, y_offset)
    return false
  public lostanza defn w_cairo_surface_set_fallback_resolution (surface:ptr<?>, x_pixels_per_inch:double, y_pixels_per_inch:double) -> ref<False> :
    call-c [p_cairo_surface_set_fallback_resolution](surface, x_pixels_per_inch, y_pixels_per_inch)
    return false
  public lostanza defn w_cairo_surface_get_fallback_resolution (surface:ptr<?>, x_pixels_per_inch:ptr<double>, y_pixels_per_inch:ptr<double>) -> ref<False> :
    call-c [p_cairo_surface_get_fallback_resolution](surface, x_pixels_per_inch, y_pixels_per_inch)
    return false
  public lostanza defn w_cairo_surface_copy_page (surface:ptr<?>) -> ref<False> :
    call-c [p_cairo_surface_copy_page](surface)
    return false
  public lostanza defn w_cairo_surface_show_page (surface:ptr<?>) -> ref<False> :
    call-c [p_cairo_surface_show_page](surface)
    return false
  public lostanza defn w_cairo_surface_has_show_text_glyphs (surface:ptr<?>) -> int :
    val ret = call-c [p_cairo_surface_has_show_text_glyphs](surface)
    return ret
  public lostanza defn w_cairo_image_surface_create (format:int, width:int, height:int) -> ptr<?> :
    val ret = call-c [p_cairo_image_surface_create](format, width, height)
    return ret
  public lostanza defn w_cairo_format_stride_for_width (format:int, width:int) -> int :
    val ret = call-c [p_cairo_format_stride_for_width](format, width)
    return ret
  public lostanza defn w_cairo_image_surface_create_for_data (data:ptr<byte>, format:int, width:int, height:int, stride:int) -> ptr<?> :
    val ret = call-c [p_cairo_image_surface_create_for_data](data, format, width, height, stride)
    return ret
  public lostanza defn w_cairo_image_surface_get_data (surface:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_cairo_image_surface_get_data](surface)
    return ret
  public lostanza defn w_cairo_image_surface_get_format (surface:ptr<?>) -> int :
    val ret = call-c [p_cairo_image_surface_get_format](surface)
    return ret
  public lostanza defn w_cairo_image_surface_get_width (surface:ptr<?>) -> int :
    val ret = call-c [p_cairo_image_surface_get_width](surface)
    return ret
  public lostanza defn w_cairo_image_surface_get_height (surface:ptr<?>) -> int :
    val ret = call-c [p_cairo_image_surface_get_height](surface)
    return ret
  public lostanza defn w_cairo_image_surface_get_stride (surface:ptr<?>) -> int :
    val ret = call-c [p_cairo_image_surface_get_stride](surface)
    return ret
  public lostanza defn w_cairo_image_surface_create_from_png (filename:ptr<byte>) -> ptr<?> :
    val ret = call-c [p_cairo_image_surface_create_from_png](filename)
    return ret
  public lostanza defn w_cairo_image_surface_create_from_png_stream (read_func:ptr<( (ptr<?>,ptr<byte>,int) -> int )>, closure:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_image_surface_create_from_png_stream](read_func, closure)
    return ret
  public lostanza defn w_cairo_recording_surface_create (content:int, extents:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_recording_surface_create](content, extents)
    return ret
  public lostanza defn w_cairo_recording_surface_ink_extents (surface:ptr<?>, x0:ptr<double>, y0:ptr<double>, width:ptr<double>, height:ptr<double>) -> ref<False> :
    call-c [p_cairo_recording_surface_ink_extents](surface, x0, y0, width, height)
    return false
  public lostanza defn w_cairo_recording_surface_get_extents (surface:ptr<?>, extents:ptr<?>) -> int :
    val ret = call-c [p_cairo_recording_surface_get_extents](surface, extents)
    return ret
  public lostanza defn w_cairo_pattern_create_raster_source (user_data:ptr<?>, content:int, width:int, height:int) -> ptr<?> :
    val ret = call-c [p_cairo_pattern_create_raster_source](user_data, content, width, height)
    return ret
  public lostanza defn w_cairo_raster_source_pattern_set_callback_data (pattern:ptr<?>, data:ptr<?>) -> ref<False> :
    call-c [p_cairo_raster_source_pattern_set_callback_data](pattern, data)
    return false
  public lostanza defn w_cairo_raster_source_pattern_get_callback_data (pattern:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_raster_source_pattern_get_callback_data](pattern)
    return ret
  public lostanza defn w_cairo_raster_source_pattern_set_acquire (pattern:ptr<?>, acquire:ptr<( (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?> )>, release:ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>) -> ref<False> :
    call-c [p_cairo_raster_source_pattern_set_acquire](pattern, acquire, release)
    return false
  public lostanza defn w_cairo_raster_source_pattern_get_acquire (pattern:ptr<?>, acquire:ptr<ptr<( (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?> )>>, release:ptr<ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>>) -> ref<False> :
    call-c [p_cairo_raster_source_pattern_get_acquire](pattern, acquire, release)
    return false
  public lostanza defn w_cairo_raster_source_pattern_set_snapshot (pattern:ptr<?>, snapshot:ptr<( (ptr<?>,ptr<?>) -> int )>) -> ref<False> :
    call-c [p_cairo_raster_source_pattern_set_snapshot](pattern, snapshot)
    return false
  public lostanza defn w_cairo_raster_source_pattern_get_snapshot (pattern:ptr<?>) -> ptr<( (ptr<?>,ptr<?>) -> int )> :
    val ret = call-c [p_cairo_raster_source_pattern_get_snapshot](pattern)
    return ret
  public lostanza defn w_cairo_raster_source_pattern_set_copy (pattern:ptr<?>, copy:ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>) -> ref<False> :
    call-c [p_cairo_raster_source_pattern_set_copy](pattern, copy)
    return false
  public lostanza defn w_cairo_raster_source_pattern_get_copy (pattern:ptr<?>) -> ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )> :
    val ret = call-c [p_cairo_raster_source_pattern_get_copy](pattern)
    return ret
  public lostanza defn w_cairo_raster_source_pattern_set_finish (pattern:ptr<?>, finish:ptr<( (ptr<?>,ptr<?>) -> int )>) -> ref<False> :
    call-c [p_cairo_raster_source_pattern_set_finish](pattern, finish)
    return false
  public lostanza defn w_cairo_raster_source_pattern_get_finish (pattern:ptr<?>) -> ptr<( (ptr<?>,ptr<?>) -> int )> :
    val ret = call-c [p_cairo_raster_source_pattern_get_finish](pattern)
    return ret
  public lostanza defn w_cairo_pattern_create_rgb (red:double, green:double, blue:double) -> ptr<?> :
    val ret = call-c [p_cairo_pattern_create_rgb](red, green, blue)
    return ret
  public lostanza defn w_cairo_pattern_create_rgba (red:double, green:double, blue:double, alpha:double) -> ptr<?> :
    val ret = call-c [p_cairo_pattern_create_rgba](red, green, blue, alpha)
    return ret
  public lostanza defn w_cairo_pattern_create_for_surface (surface:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_pattern_create_for_surface](surface)
    return ret
  public lostanza defn w_cairo_pattern_create_linear (x0:double, y0:double, x1:double, y1:double) -> ptr<?> :
    val ret = call-c [p_cairo_pattern_create_linear](x0, y0, x1, y1)
    return ret
  public lostanza defn w_cairo_pattern_create_radial (cx0:double, cy0:double, radius0:double, cx1:double, cy1:double, radius1:double) -> ptr<?> :
    val ret = call-c [p_cairo_pattern_create_radial](cx0, cy0, radius0, cx1, cy1, radius1)
    return ret
  public lostanza defn w_cairo_pattern_create_mesh () -> ptr<?> :
    val ret = call-c [p_cairo_pattern_create_mesh]()
    return ret
  public lostanza defn w_cairo_pattern_reference (pattern:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_pattern_reference](pattern)
    return ret
  public lostanza defn w_cairo_pattern_destroy (pattern:ptr<?>) -> ref<False> :
    call-c [p_cairo_pattern_destroy](pattern)
    return false
  public lostanza defn w_cairo_pattern_get_reference_count (pattern:ptr<?>) -> int :
    val ret = call-c [p_cairo_pattern_get_reference_count](pattern)
    return ret
  public lostanza defn w_cairo_pattern_status (pattern:ptr<?>) -> int :
    val ret = call-c [p_cairo_pattern_status](pattern)
    return ret
  public lostanza defn w_cairo_pattern_get_user_data (pattern:ptr<?>, key:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_pattern_get_user_data](pattern, key)
    return ret
  public lostanza defn w_cairo_pattern_set_user_data (pattern:ptr<?>, key:ptr<?>, user_data:ptr<?>, destroy:ptr<( (ptr<?>) -> int )>) -> int :
    val ret = call-c [p_cairo_pattern_set_user_data](pattern, key, user_data, destroy)
    return ret
  public lostanza defn w_cairo_pattern_get_type (pattern:ptr<?>) -> int :
    val ret = call-c [p_cairo_pattern_get_type](pattern)
    return ret
  public lostanza defn w_cairo_pattern_add_color_stop_rgb (pattern:ptr<?>, offset:double, red:double, green:double, blue:double) -> ref<False> :
    call-c [p_cairo_pattern_add_color_stop_rgb](pattern, offset, red, green, blue)
    return false
  public lostanza defn w_cairo_pattern_add_color_stop_rgba (pattern:ptr<?>, offset:double, red:double, green:double, blue:double, alpha:double) -> ref<False> :
    call-c [p_cairo_pattern_add_color_stop_rgba](pattern, offset, red, green, blue, alpha)
    return false
  public lostanza defn w_cairo_mesh_pattern_begin_patch (pattern:ptr<?>) -> ref<False> :
    call-c [p_cairo_mesh_pattern_begin_patch](pattern)
    return false
  public lostanza defn w_cairo_mesh_pattern_end_patch (pattern:ptr<?>) -> ref<False> :
    call-c [p_cairo_mesh_pattern_end_patch](pattern)
    return false
  public lostanza defn w_cairo_mesh_pattern_curve_to (pattern:ptr<?>, x1:double, y1:double, x2:double, y2:double, x3:double, y3:double) -> ref<False> :
    call-c [p_cairo_mesh_pattern_curve_to](pattern, x1, y1, x2, y2, x3, y3)
    return false
  public lostanza defn w_cairo_mesh_pattern_line_to (pattern:ptr<?>, x:double, y:double) -> ref<False> :
    call-c [p_cairo_mesh_pattern_line_to](pattern, x, y)
    return false
  public lostanza defn w_cairo_mesh_pattern_move_to (pattern:ptr<?>, x:double, y:double) -> ref<False> :
    call-c [p_cairo_mesh_pattern_move_to](pattern, x, y)
    return false
  public lostanza defn w_cairo_mesh_pattern_set_control_point (pattern:ptr<?>, point_num:int, x:double, y:double) -> ref<False> :
    call-c [p_cairo_mesh_pattern_set_control_point](pattern, point_num, x, y)
    return false
  public lostanza defn w_cairo_mesh_pattern_set_corner_color_rgb (pattern:ptr<?>, corner_num:int, red:double, green:double, blue:double) -> ref<False> :
    call-c [p_cairo_mesh_pattern_set_corner_color_rgb](pattern, corner_num, red, green, blue)
    return false
  public lostanza defn w_cairo_mesh_pattern_set_corner_color_rgba (pattern:ptr<?>, corner_num:int, red:double, green:double, blue:double, alpha:double) -> ref<False> :
    call-c [p_cairo_mesh_pattern_set_corner_color_rgba](pattern, corner_num, red, green, blue, alpha)
    return false
  public lostanza defn w_cairo_pattern_set_matrix (pattern:ptr<?>, matrix:ptr<?>) -> ref<False> :
    call-c [p_cairo_pattern_set_matrix](pattern, matrix)
    return false
  public lostanza defn w_cairo_pattern_get_matrix (pattern:ptr<?>, matrix:ptr<?>) -> ref<False> :
    call-c [p_cairo_pattern_get_matrix](pattern, matrix)
    return false
  public lostanza defn w_cairo_pattern_set_extend (pattern:ptr<?>, extend:int) -> ref<False> :
    call-c [p_cairo_pattern_set_extend](pattern, extend)
    return false
  public lostanza defn w_cairo_pattern_get_extend (pattern:ptr<?>) -> int :
    val ret = call-c [p_cairo_pattern_get_extend](pattern)
    return ret
  public lostanza defn w_cairo_pattern_set_filter (pattern:ptr<?>, filter:int) -> ref<False> :
    call-c [p_cairo_pattern_set_filter](pattern, filter)
    return false
  public lostanza defn w_cairo_pattern_get_filter (pattern:ptr<?>) -> int :
    val ret = call-c [p_cairo_pattern_get_filter](pattern)
    return ret
  public lostanza defn w_cairo_pattern_get_rgba (pattern:ptr<?>, red:ptr<double>, green:ptr<double>, blue:ptr<double>, alpha:ptr<double>) -> int :
    val ret = call-c [p_cairo_pattern_get_rgba](pattern, red, green, blue, alpha)
    return ret
  public lostanza defn w_cairo_pattern_get_surface (pattern:ptr<?>, surface:ptr<ptr<?>>) -> int :
    val ret = call-c [p_cairo_pattern_get_surface](pattern, surface)
    return ret
  public lostanza defn w_cairo_pattern_get_color_stop_rgba (pattern:ptr<?>, index:int, offset:ptr<double>, red:ptr<double>, green:ptr<double>, blue:ptr<double>, alpha:ptr<double>) -> int :
    val ret = call-c [p_cairo_pattern_get_color_stop_rgba](pattern, index, offset, red, green, blue, alpha)
    return ret
  public lostanza defn w_cairo_pattern_get_color_stop_count (pattern:ptr<?>, count:ptr<int>) -> int :
    val ret = call-c [p_cairo_pattern_get_color_stop_count](pattern, count)
    return ret
  public lostanza defn w_cairo_pattern_get_linear_points (pattern:ptr<?>, x0:ptr<double>, y0:ptr<double>, x1:ptr<double>, y1:ptr<double>) -> int :
    val ret = call-c [p_cairo_pattern_get_linear_points](pattern, x0, y0, x1, y1)
    return ret
  public lostanza defn w_cairo_pattern_get_radial_circles (pattern:ptr<?>, x0:ptr<double>, y0:ptr<double>, r0:ptr<double>, x1:ptr<double>, y1:ptr<double>, r1:ptr<double>) -> int :
    val ret = call-c [p_cairo_pattern_get_radial_circles](pattern, x0, y0, r0, x1, y1, r1)
    return ret
  public lostanza defn w_cairo_mesh_pattern_get_patch_count (pattern:ptr<?>, count:ptr<int>) -> int :
    val ret = call-c [p_cairo_mesh_pattern_get_patch_count](pattern, count)
    return ret
  public lostanza defn w_cairo_mesh_pattern_get_path (pattern:ptr<?>, patch_num:int) -> ptr<?> :
    val ret = call-c [p_cairo_mesh_pattern_get_path](pattern, patch_num)
    return ret
  public lostanza defn w_cairo_mesh_pattern_get_corner_color_rgba (pattern:ptr<?>, patch_num:int, corner_num:int, red:ptr<double>, green:ptr<double>, blue:ptr<double>, alpha:ptr<double>) -> int :
    val ret = call-c [p_cairo_mesh_pattern_get_corner_color_rgba](pattern, patch_num, corner_num, red, green, blue, alpha)
    return ret
  public lostanza defn w_cairo_mesh_pattern_get_control_point (pattern:ptr<?>, patch_num:int, point_num:int, x:ptr<double>, y:ptr<double>) -> int :
    val ret = call-c [p_cairo_mesh_pattern_get_control_point](pattern, patch_num, point_num, x, y)
    return ret
  public lostanza defn w_cairo_matrix_init (matrix:ptr<?>, xx:double, yx:double, xy:double, yy:double, x0:double, y0:double) -> ref<False> :
    call-c [p_cairo_matrix_init](matrix, xx, yx, xy, yy, x0, y0)
    return false
  public lostanza defn w_cairo_matrix_init_identity (matrix:ptr<?>) -> ref<False> :
    call-c [p_cairo_matrix_init_identity](matrix)
    return false
  public lostanza defn w_cairo_matrix_init_translate (matrix:ptr<?>, tx:double, ty:double) -> ref<False> :
    call-c [p_cairo_matrix_init_translate](matrix, tx, ty)
    return false
  public lostanza defn w_cairo_matrix_init_scale (matrix:ptr<?>, sx:double, sy:double) -> ref<False> :
    call-c [p_cairo_matrix_init_scale](matrix, sx, sy)
    return false
  public lostanza defn w_cairo_matrix_init_rotate (matrix:ptr<?>, radians:double) -> ref<False> :
    call-c [p_cairo_matrix_init_rotate](matrix, radians)
    return false
  public lostanza defn w_cairo_matrix_translate (matrix:ptr<?>, tx:double, ty:double) -> ref<False> :
    call-c [p_cairo_matrix_translate](matrix, tx, ty)
    return false
  public lostanza defn w_cairo_matrix_scale (matrix:ptr<?>, sx:double, sy:double) -> ref<False> :
    call-c [p_cairo_matrix_scale](matrix, sx, sy)
    return false
  public lostanza defn w_cairo_matrix_rotate (matrix:ptr<?>, radians:double) -> ref<False> :
    call-c [p_cairo_matrix_rotate](matrix, radians)
    return false
  public lostanza defn w_cairo_matrix_invert (matrix:ptr<?>) -> int :
    val ret = call-c [p_cairo_matrix_invert](matrix)
    return ret
  public lostanza defn w_cairo_matrix_multiply (result:ptr<?>, a:ptr<?>, b:ptr<?>) -> ref<False> :
    call-c [p_cairo_matrix_multiply](result, a, b)
    return false
  public lostanza defn w_cairo_matrix_transform_distance (matrix:ptr<?>, dx:ptr<double>, dy:ptr<double>) -> ref<False> :
    call-c [p_cairo_matrix_transform_distance](matrix, dx, dy)
    return false
  public lostanza defn w_cairo_matrix_transform_point (matrix:ptr<?>, x:ptr<double>, y:ptr<double>) -> ref<False> :
    call-c [p_cairo_matrix_transform_point](matrix, x, y)
    return false
  public lostanza defn w_cairo_region_create () -> ptr<?> :
    val ret = call-c [p_cairo_region_create]()
    return ret
  public lostanza defn w_cairo_region_create_rectangle (rectangle:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_region_create_rectangle](rectangle)
    return ret
  public lostanza defn w_cairo_region_create_rectangles (rects:ptr<?>, count:int) -> ptr<?> :
    val ret = call-c [p_cairo_region_create_rectangles](rects, count)
    return ret
  public lostanza defn w_cairo_region_copy (original:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_region_copy](original)
    return ret
  public lostanza defn w_cairo_region_reference (region:ptr<?>) -> ptr<?> :
    val ret = call-c [p_cairo_region_reference](region)
    return ret
  public lostanza defn w_cairo_region_destroy (region:ptr<?>) -> ref<False> :
    call-c [p_cairo_region_destroy](region)
    return false
  public lostanza defn w_cairo_region_equal (a:ptr<?>, b:ptr<?>) -> int :
    val ret = call-c [p_cairo_region_equal](a, b)
    return ret
  public lostanza defn w_cairo_region_status (region:ptr<?>) -> int :
    val ret = call-c [p_cairo_region_status](region)
    return ret
  public lostanza defn w_cairo_region_get_extents (region:ptr<?>, extents:ptr<?>) -> ref<False> :
    call-c [p_cairo_region_get_extents](region, extents)
    return false
  public lostanza defn w_cairo_region_num_rectangles (region:ptr<?>) -> int :
    val ret = call-c [p_cairo_region_num_rectangles](region)
    return ret
  public lostanza defn w_cairo_region_get_rectangle (region:ptr<?>, nth:int, rectangle:ptr<?>) -> ref<False> :
    call-c [p_cairo_region_get_rectangle](region, nth, rectangle)
    return false
  public lostanza defn w_cairo_region_is_empty (region:ptr<?>) -> int :
    val ret = call-c [p_cairo_region_is_empty](region)
    return ret
  public lostanza defn w_cairo_region_contains_rectangle (region:ptr<?>, rectangle:ptr<?>) -> int :
    val ret = call-c [p_cairo_region_contains_rectangle](region, rectangle)
    return ret
  public lostanza defn w_cairo_region_contains_point (region:ptr<?>, x:int, y:int) -> int :
    val ret = call-c [p_cairo_region_contains_point](region, x, y)
    return ret
  public lostanza defn w_cairo_region_translate (region:ptr<?>, dx:int, dy:int) -> ref<False> :
    call-c [p_cairo_region_translate](region, dx, dy)
    return false
  public lostanza defn w_cairo_region_subtract (dst:ptr<?>, other:ptr<?>) -> int :
    val ret = call-c [p_cairo_region_subtract](dst, other)
    return ret
  public lostanza defn w_cairo_region_subtract_rectangle (dst:ptr<?>, rectangle:ptr<?>) -> int :
    val ret = call-c [p_cairo_region_subtract_rectangle](dst, rectangle)
    return ret
  public lostanza defn w_cairo_region_intersect (dst:ptr<?>, other:ptr<?>) -> int :
    val ret = call-c [p_cairo_region_intersect](dst, other)
    return ret
  public lostanza defn w_cairo_region_intersect_rectangle (dst:ptr<?>, rectangle:ptr<?>) -> int :
    val ret = call-c [p_cairo_region_intersect_rectangle](dst, rectangle)
    return ret
  public lostanza defn w_cairo_region_union (dst:ptr<?>, other:ptr<?>) -> int :
    val ret = call-c [p_cairo_region_union](dst, other)
    return ret
  public lostanza defn w_cairo_region_union_rectangle (dst:ptr<?>, rectangle:ptr<?>) -> int :
    val ret = call-c [p_cairo_region_union_rectangle](dst, rectangle)
    return ret
  public lostanza defn w_cairo_region_xor (dst:ptr<?>, other:ptr<?>) -> int :
    val ret = call-c [p_cairo_region_xor](dst, other)
    return ret
  public lostanza defn w_cairo_region_xor_rectangle (dst:ptr<?>, rectangle:ptr<?>) -> int :
    val ret = call-c [p_cairo_region_xor_rectangle](dst, rectangle)
    return ret
  public lostanza defn w_cairo_debug_reset_static_data () -> ref<False> :
    call-c [p_cairo_debug_reset_static_data]()
    return false
